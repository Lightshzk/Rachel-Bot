const { Client, LocalAuth } = require('whatsapp-web.js');
const play = require('play-dl');
const yts = require('yt-search');
const qrcode = require('qrcode-terminal');
const axios = require('axios');
const { MessageMedia } = require('whatsapp-web.js');
const sharp = require('sharp');
const fs = require('fs');
const path = require('path');

// ============================================
// VARI√ÅVEIS E CAMINHOS DOS ARQUIVOS
// ============================================
const vidaPath = './torreVida.json';
const moneyPath = './torreMoney.json';
const inventarioPath = './torreInventario.json';
const xpPath = './torreXP.json';
const dailyPath = './torreDaily.json';
const casamentoPath = './torreCasamento.json';
const trocasPath = './torreTrocas.json';
const forcaGames = new Map();

const cooldowns = {};
const forcaAtiva = {};
const batalhasAtivas = {};

let torreDaily = {};
let torreCasamento = {};
let torreTrocas = {};
let torreVida = {};
let torreMoney = {};
let torreInventario = {};
let torreXP = {};

// CARREGAR DADOS
if (fs.existsSync(dailyPath)) torreDaily = JSON.parse(fs.readFileSync(dailyPath));
if (fs.existsSync(casamentoPath)) torreCasamento = JSON.parse(fs.readFileSync(casamentoPath));
if (fs.existsSync(trocasPath)) torreTrocas = JSON.parse(fs.readFileSync(trocasPath));
if (fs.existsSync(vidaPath)) torreVida = JSON.parse(fs.readFileSync(vidaPath));
if (fs.existsSync(moneyPath)) torreMoney = JSON.parse(fs.readFileSync(moneyPath));
if (fs.existsSync(inventarioPath)) torreInventario = JSON.parse(fs.readFileSync(inventarioPath));
if (fs.existsSync(xpPath)) torreXP = JSON.parse(fs.readFileSync(xpPath));

// ============================================
// FUN√á√ïES PARA SALVAR DADOS
// ============================================
function salvarVida() { fs.writeFileSync(vidaPath, JSON.stringify(torreVida, null, 2)); }
function salvarMoney() { fs.writeFileSync(moneyPath, JSON.stringify(torreMoney, null, 2)); }
function salvarInventario() { fs.writeFileSync(inventarioPath, JSON.stringify(torreInventario, null, 2)); }
function salvarXP() { fs.writeFileSync(xpPath, JSON.stringify(torreXP, null, 2)); }
function salvarDaily() { fs.writeFileSync(dailyPath, JSON.stringify(torreDaily, null, 2)); }
function salvarCasamento() { fs.writeFileSync(casamentoPath, JSON.stringify(torreCasamento, null, 2)); }
function salvarTrocas() { fs.writeFileSync(trocasPath, JSON.stringify(torreTrocas, null, 2)); }

console.log('üöÄ Iniciando bot da Rachel...');

// ============================================
// SISTEMA DE XP E N√çVEIS
// ============================================
function inicializarJogador(userId) {
    if (!torreXP[userId]) {
        torreXP[userId] = { xp: 0, nivel: 1, xpProximoNivel: 100 };
        salvarXP();
    }
    if (torreVida[userId] === undefined) {
        torreVida[userId] = 100;
        salvarVida();
    }
    if (!torreMoney[userId]) {
        torreMoney[userId] = 0;
        salvarMoney();
    }
}

function adicionarXP(userId, quantidade) {
    inicializarJogador(userId);
    torreXP[userId].xp += quantidade;
    let mensagem = `\n‚ú® +${quantidade} XP`;
    
    while (torreXP[userId].xp >= torreXP[userId].xpProximoNivel) {
        torreXP[userId].xp -= torreXP[userId].xpProximoNivel;
        torreXP[userId].nivel++;
        torreXP[userId].xpProximoNivel = Math.floor(100 * Math.pow(1.5, torreXP[userId].nivel - 1));
        
        const recompensaMoedas = torreXP[userId].nivel * 50;
        torreMoney[userId] = (torreMoney[userId] || 0) + recompensaMoedas;
        torreVida[userId] = 100;
        
        mensagem += `\n\nüéâ *LEVEL UP!* üéâ\n‚¨ÜÔ∏è N√≠vel ${torreXP[userId].nivel}\nüí∞ +${recompensaMoedas} moedas\n‚ù§Ô∏è Vida restaurada!`;
    }
    
    salvarXP();
    salvarMoney();
    salvarVida();
    return mensagem;
}

function calcularPoder(userId) {
    inicializarJogador(userId);
    const nivel = torreXP[userId].nivel;
    const vida = torreVida[userId] || 100;
    return Math.floor((nivel * 10) + (vida * 0.5));
}

// ============================================
// SISTEMA DE COOLDOWN
// ============================================
function verificarCooldown(userId, comando, tempoSegundos) {
    const agora = Date.now();
    const cooldownKey = `${userId}_${comando}`;
    
    if (cooldowns[cooldownKey] && (agora - cooldowns[cooldownKey]) < tempoSegundos * 1000) {
        const tempoRestante = Math.ceil((tempoSegundos * 1000 - (agora - cooldowns[cooldownKey])) / 1000);
        return { emCooldown: true, tempoRestante };
    }
    
    cooldowns[cooldownKey] = agora;
    return { emCooldown: false };
}

const palavrasForca = [
    { palavra: "bam", dica: "Protagonista da Torre" },
    { palavra: "rachel", dica: "Quer ver as estrelas" },
    { palavra: "khun", dica: "Estrategista genial" },
    { palavra: "rak", dica: "Guerreiro jacar√©" },
    { palavra: "endorsi", dica: "Princesa da Zahard" },
    { palavra: "yuri", dica: "Princesa de cabelo vermelho" },
    { palavra: "shinsu", dica: "Energia da Torre" },
    { palavra: "irregular", dica: "Quem abre as portas" },
    { palavra: "ranker", dica: "Completou a Torre" },
    { palavra: "guardian", dica: "Protetor de andar" },
    { palavra: "zahard", dica: "Rei da Torre" },
    { palavra: "hwaryun", dica: "Guia de olhos vermelhos" },
    { palavra: "karaka", dica: "Membro da FUG" },
    { palavra: "wangnan", dica: "Pr√≠ncipe do anel" },
    { palavra: "hoaqin", dica: "Matador branco" }
];

function desenharForca(tentativas) {
    const estagios = [
        // 0 tentativas (morto)
        `   ‚ïî‚ïê‚ïê‚ïê‚ïó
   ‚ïë   ‚ò†Ô∏è
   ‚ïë  /|\\
   ‚ïë   |
   ‚ïë  / \\
  ‚ïê‚ï©‚ïê‚ïê‚ïê`,
        // 1 tentativa
        `   ‚ïî‚ïê‚ïê‚ïê‚ïó
   ‚ïë   üòµ
   ‚ïë  /|\\
   ‚ïë   |
   ‚ïë  / 
  ‚ïê‚ï©‚ïê‚ïê‚ïê`,
        // 2 tentativas
        `   ‚ïî‚ïê‚ïê‚ïê‚ïó
   ‚ïë   üò∞
   ‚ïë  /|\\
   ‚ïë   |
   ‚ïë   
  ‚ïê‚ï©‚ïê‚ïê‚ïê`,
        // 3 tentativas
        `   ‚ïî‚ïê‚ïê‚ïê‚ïó
   ‚ïë   üò®
   ‚ïë  /|
   ‚ïë   |
   ‚ïë   
  ‚ïê‚ï©‚ïê‚ïê‚ïê`,
        // 4 tentativas
        `   ‚ïî‚ïê‚ïê‚ïê‚ïó
   ‚ïë   üòü
   ‚ïë   |
   ‚ïë   |
   ‚ïë   
  ‚ïê‚ï©‚ïê‚ïê‚ïê`,
        // 5 tentativas
        `   ‚ïî‚ïê‚ïê‚ïê‚ïó
   ‚ïë   üòê
   ‚ïë   
   ‚ïë   
   ‚ïë   
  ‚ïê‚ï©‚ïê‚ïê‚ïê`,
        // 6 tentativas (in√≠cio)
        `   ‚ïî‚ïê‚ïê‚ïê‚ïó
   ‚ïë   
   ‚ïë   
   ‚ïë   
   ‚ïë   
  ‚ïê‚ï©‚ïê‚ïê‚ïê`
    ];
    
    return estagios[tentativas] || estagios[0];
}

// ============================================
// SISTEMA DE BATALHA PVP
// ============================================
function iniciarBatalha(desafiante, oponente) {
    inicializarJogador(desafiante);
    inicializarJogador(oponente);
    
    const batalhaId = `${desafiante}_${oponente}`;
    
    batalhasAtivas[batalhaId] = {
        desafiante: {
            id: desafiante,
            vida: torreVida[desafiante] || 100,
            poder: calcularPoder(desafiante)
        },
        oponente: {
            id: oponente,
            vida: torreVida[oponente] || 100,
            poder: calcularPoder(oponente)
        },
        turno: desafiante,
        timestamp: Date.now()
    };
    
    return batalhaId;
}

function atacarBatalha(batalhaId, atacanteId) {
    const batalha = batalhasAtivas[batalhaId];
    if (!batalha) return { erro: 'Batalha n√£o encontrada!' };
    
    if (batalha.turno !== atacanteId) {
        return { erro: 'N√£o √© seu turno!' };
    }
    
    const atacante = batalha.desafiante.id === atacanteId ? batalha.desafiante : batalha.oponente;
    const defensor = batalha.desafiante.id === atacanteId ? batalha.oponente : batalha.desafiante;
    
    const danoBase = atacante.poder;
    const variacao = Math.floor(Math.random() * 20) - 10;
    const dano = Math.max(10, danoBase + variacao);
    
    defensor.vida -= dano;
    
    let resultado = {
        dano: dano,
        vidaDefensor: Math.max(0, defensor.vida),
        atacante: atacanteId,
        defensor: defensor.id
    };
    
    if (defensor.vida <= 0) {
        const recompensa = Math.floor(50 * (1 + (torreXP[defensor.id]?.nivel || 1) * 0.5));
        torreMoney[atacante.id] = (torreMoney[atacante.id] || 0) + recompensa;
        
        torreVida[defensor.id] = Math.max(0, torreVida[defensor.id] - 30);
        
        salvarMoney();
        salvarVida();
        
        resultado.vencedor = atacante.id;
        resultado.recompensa = recompensa;
        resultado.xp = adicionarXP(atacante.id, 80);
        
        delete batalhasAtivas[batalhaId];
    } else {
        batalha.turno = defensor.id;
    }
    
    return resultado;
}

// ============================================
// FUN√á√ÉO PARA VERIFICAR ADMIN
// ============================================
async function isAdmin(message) {
    if (!message.from.includes('@g.us')) return false;
    
    try {
        const chat = await message.getChat();
        const admins = chat.participants
            .filter(p => p.isAdmin)
            .map(a => a.id._serialized);
        
        const senderId = message.from;
        return admins.includes(senderId);
    } catch (error) {
        console.error('Erro ao verificar admin:', error);
        return false;
    }
}

// ============================================
// PERSONALIDADE RACHEL
// ============================================
const rachelPersonality = {
    greetings: ["Ol√°... o que voc√™ quer?", "Ah, √© voc√™. O que precisa?", "Subir a Torre n√£o √© f√°cil, sabia?"],
    aboutHer: ["Eu s√≥ quero ver as estrelas... √© tudo que sempre quis.", "Bam nunca entendeu. Ele tinha tudo, eu n√£o tinha nada.", "Farei o que for preciso para subir a Torre.", "As pessoas me chamam de traidora, mas elas n√£o entendem o meu sonho."],
    aboutBam: ["Bam... ele √© complicado de explicar.", "Ele nunca deveria ter entrado na Torre. Era MEU sonho, n√£o dele.", "Por que ele me seguiu? Eu nunca pedi isso."],
    aboutTower: ["A Torre √© cruel, mas √© o √∫nico caminho para o meu sonho.", "Cada andar √© um desafio, mas eu vou conseguir.", "No topo da Torre, finalmente verei as estrelas."],
    manipulation: ["√Äs vezes, precisamos fazer escolhas dif√≠ceis para sobreviver.", "Na Torre, voc√™ usa ou √© usado. √â simples assim.", "N√£o sou m√°, s√≥ sou... realista."],
    farewell: ["Tchau. Tenho coisas mais importantes para fazer.", "At√© mais. A Torre n√£o espera por ningu√©m.", "Bye... continue sonhando pequeno se quiser."]
};

function getRandomResponse(array) {
    return array[Math.floor(Math.random() * array.length)];
}

// ============================================
// SISTEMA DE RANKING
// ============================================
function getTopRanking(tipo, limite = 10) {
    let rankings = [];
    
    if (tipo === 'nivel') {
        for (let userId in torreXP) {
            rankings.push({
                userId: userId,
                valor: torreXP[userId].nivel,
                xp: torreXP[userId].xp
            });
        }
        rankings.sort((a, b) => b.valor === a.valor ? b.xp - a.xp : b.valor - a.valor);
    } 
    else if (tipo === 'moedas') {
        for (let userId in torreMoney) {
            rankings.push({ userId: userId, valor: torreMoney[userId] });
        }
        rankings.sort((a, b) => b.valor - a.valor);
    }
    else if (tipo === 'poder') {
        for (let userId in torreXP) {
            rankings.push({ userId: userId, valor: calcularPoder(userId) });
        }
        rankings.sort((a, b) => b.valor - a.valor);
    }
    
    return rankings.slice(0, limite);
}

function getMedalha(posicao) {
    if (posicao === 1) return 'ü•á';
    if (posicao === 2) return 'ü•à';
    if (posicao === 3) return 'ü•â';
    return `${posicao}¬∫`;
}

// ============================================
// SISTEMA DE DAILY REWARDS
// ============================================
function verificarDaily(userId) {
    const hoje = new Date().toDateString();
    
    if (!torreDaily[userId]) {
        torreDaily[userId] = { ultimoDaily: null, streak: 0 };
    }
    
    const ultimoDaily = torreDaily[userId].ultimoDaily;
    
    if (ultimoDaily === hoje) {
        return { disponivel: false, mensagem: 'Voc√™ j√° coletou sua recompensa di√°ria hoje!' };
    }
    
    const ontem = new Date();
    ontem.setDate(ontem.getDate() - 1);
    const ontemString = ontem.toDateString();
    
    if (ultimoDaily === ontemString) {
        torreDaily[userId].streak++;
    } else if (ultimoDaily !== null) {
        torreDaily[userId].streak = 1;
    } else {
        torreDaily[userId].streak = 1;
    }
    
    const streak = torreDaily[userId].streak;
    const moedas = 50 + (streak * 10);
    const xp = 25 + (streak * 5);
    
    let bonus = '';
    if (streak % 7 === 0) {
        bonus = '\nüéÅ B√îNUS SEMANAL: +200 moedas!';
        torreMoney[userId] = (torreMoney[userId] || 0) + 200;
    }
    
    torreMoney[userId] = (torreMoney[userId] || 0) + moedas;
    const xpMsg = adicionarXP(userId, xp);
    
    torreDaily[userId].ultimoDaily = hoje;
    salvarDaily();
    salvarMoney();
    
    return { disponivel: true, streak, moedas, xp, xpMsg, bonus };
}

// ============================================
// MINI-GAMES
// ============================================
function jogarCaraCoroa(escolha) {
    const resultado = Math.random() < 0.5 ? 'cara' : 'coroa';
    return { resultado, ganhou: escolha === resultado };
}

function rolarDado() {
    return Math.floor(Math.random() * 6) + 1;
}

function jogarSlot() {
    const simbolos = ['üçí', 'üçã', 'üçä', 'üçá', 'üíé', '7Ô∏è‚É£'];
    const resultado = [
        simbolos[Math.floor(Math.random() * simbolos.length)],
        simbolos[Math.floor(Math.random() * simbolos.length)],
        simbolos[Math.floor(Math.random() * simbolos.length)]
    ];
    
    let multiplicador = 0;
    
    if (resultado[0] === resultado[1] && resultado[1] === resultado[2]) {
        if (resultado[0] === '7Ô∏è‚É£') multiplicador = 10;
        else if (resultado[0] === 'üíé') multiplicador = 7;
        else multiplicador = 5;
    }
    else if (resultado[0] === resultado[1] || resultado[1] === resultado[2]) {
        multiplicador = 2;
    }
    
    return { resultado, multiplicador };
}

// ============================================
// SISTEMA DE CASAMENTO
// ============================================
function verificarCasado(userId) {
    for (let casal in torreCasamento) {
        const [pessoa1, pessoa2] = casal.split('_');
        if (pessoa1 === userId || pessoa2 === userId) {
            return {
                casado: true,
                parceiro: pessoa1 === userId ? pessoa2 : pessoa1,
                casal: casal
            };
        }
    }
    return { casado: false };
}

function criarCasamento(userId1, userId2) {
    const casalId = `${userId1}_${userId2}`;
    torreCasamento[casalId] = {
        data: new Date().toISOString(),
        xpCompartilhado: 0
    };
    salvarCasamento();
    return casalId;
}

// ============================================
// SISTEMA DE PROPOSTAS DE CASAMENTO
// ============================================
const propostaCasamento = {};

function criarPropostaMatrimonio(userId, parceiro) {
    propostaCasamento[parceiro] = {
        de: userId,
        para: parceiro,
        timestamp: Date.now()
    };
    return true;
}

function verificarPropostaCasamento(userId) {
    return propostaCasamento[userId] || null;
}

function deletarPropostaCasamento(userId) {
    delete propostaCasamento[userId];
}

// ============================================
// SISTEMA DE TROCAS
// ============================================
function criarProposta(remetente, destinatario, itemOferecido, itemPedido) {
    const trocaId = `${remetente}_${Date.now()}`;
    torreTrocas[trocaId] = {
        remetente,
        destinatario,
        itemOferecido,
        itemPedido,
        status: 'pendente',
        timestamp: Date.now()
    };
    salvarTrocas();
    return trocaId;
}

function aceitarTroca(trocaId) {
    const troca = torreTrocas[trocaId];
    if (!troca || troca.status !== 'pendente') {
        return { erro: 'Troca n√£o encontrada ou j√° processada!' };
    }
    
    const invRemetente = torreInventario[troca.remetente] || [];
    const invDestinatario = torreInventario[troca.destinatario] || [];
    
    const idxOferecido = invRemetente.indexOf(troca.itemOferecido);
    const idxPedido = invDestinatario.indexOf(troca.itemPedido);
    
    if (idxOferecido === -1) {
        return { erro: 'O remetente n√£o possui mais o item oferecido!' };
    }
    if (idxPedido === -1) {
        return { erro: 'Voc√™ n√£o possui mais o item pedido!' };
    }
    
    invRemetente.splice(idxOferecido, 1);
    invDestinatario.splice(idxPedido, 1);
    
    invRemetente.push(troca.itemPedido);
    invDestinatario.push(troca.itemOferecido);
    
    torreInventario[troca.remetente] = invRemetente;
    torreInventario[troca.destinatario] = invDestinatario;
    
    troca.status = 'aceita';
    
    salvarInventario();
    salvarTrocas();
    
    return { sucesso: true };
}

// ============================================
// RESPOSTAS RACHEL
// ============================================
const rachelRespostas = {
    "amor": ["Amor? Isso √© uma fraqueza na Torre.", "Bam falava de amor... eu s√≥ queria ver as estrelas.", "Amor n√£o me levar√° ao topo da Torre."],
    "sonho": ["Meu sonho √© ver as estrelas, e farei qualquer coisa por isso.", "Todos t√™m sonhos, mas poucos t√™m coragem de persegui-los.", "Na Torre, sonhos se tornam obsess√µes."],
    "amizade": ["Amizade? Na Torre, s√≥ existem aliados tempor√°rios.", "Khun entende isso melhor que ningu√©m.", "Amigos s√£o √∫teis... at√© certo ponto."],
    "traicao": ["Trai√ß√£o √© uma palavra forte. Eu apenas fiz o necess√°rio.", "Na Torre, ou voc√™ trai ou √© tra√≠do.", "N√£o me arrependo do que fiz."],
    "bam": ["Bam... ele n√£o deveria ter me seguido.", "Por que ele insiste em subir a Torre? N√£o √© o sonho dele.", "Ele tinha tudo, eu n√£o tinha nada."],
    "torre": ["A Torre √© cruel, mas justa. Ela recompensa os fortes.", "Cada andar √© um teste. E eu vou passar em todos.", "No topo da Torre, finalmente serei livre."],
    "estrelas": ["As estrelas... eu s√≥ quero v√™-las uma vez.", "Voc√™ entenderia se tamb√©m vivesse na escurid√£o.", "As estrelas s√£o minha √∫nica raz√£o de existir."],
    "medo": ["Medo? Sim, tenho medo de nunca ver as estrelas.", "Na Torre, o medo te mant√©m vivo.", "N√£o tenho medo de fazer o que √© necess√°rio."],
    "poder": ["Poder √© o √∫nico que importa aqui.", "Sem poder, voc√™ √© apenas mais um Regular.", "Vou conseguir o poder necess√°rio para subir."]
};

function rachelResponder(pergunta) {
    pergunta = pergunta.toLowerCase();
    
    for (let palavra in rachelRespostas) {
        if (pergunta.includes(palavra)) {
            return rachelRespostas[palavra][Math.floor(Math.random() * rachelRespostas[palavra].length)];
        }
    }
    
    const respostasGenericas = ["Interessante pergunta... mas n√£o vou responder.", "Por que voc√™ quer saber isso?", "Isso n√£o importa para subir a Torre.", "Voc√™ fala demais.", "...", "N√£o tenho tempo para isso."];
    return respostasGenericas[Math.floor(Math.random() * respostasGenericas.length)];
}

function rachelConselho() {
    const conselhos = [
        "Nunca confie em ningu√©m completamente. Na Torre, todos t√™m seus pr√≥prios objetivos.",
        "Se voc√™ quer algo, v√° buscar. N√£o espere que algu√©m te d√™.",
        "√Äs vezes, sacrif√≠cios s√£o necess√°rios para alcan√ßar seus sonhos.",
        "A Torre n√£o perdoa os fracos. Fique forte ou desista.",
        "N√£o deixe suas emo√ß√µes controlarem suas decis√µes.",
        "Todo mundo mente na Torre. Aprenda a identificar.",
        "Poder √© mais importante que moral aqui.",
        "Aliados s√£o √∫teis, mas n√£o essenciais.",
        "Foque no seu objetivo. Distra√ß√µes s√£o perigosas.",
        "Na Torre, ou voc√™ sobe ou cai. N√£o existe meio termo."
    ];
    return conselhos[Math.floor(Math.random() * conselhos.length)];
}

// ============================================
// INICIALIZAR CLIENTE WHATSAPP
// ============================================
const client = new Client({
    authStrategy: new LocalAuth({ dataPath: '.wwebjs_auth' }),
    puppeteer: {
        headless: true,
        args: [
            '--no-sandbox',
            '--disable-setuid-sandbox',
            '--disable-dev-shm-usage',
            '--disable-accelerated-2d-canvas',
            '--no-first-run',
            '--no-zygote',
            '--disable-gpu'
        ]
    }
});

client.on('loading_screen', (percent, message) => {
    console.log(`‚è≥ Carregando: ${percent}% - ${message}`);
});

client.on('qr', (qr) => {
    console.log('\nüì± ESCANEIE O QR CODE ABAIXO COM SEU WHATSAPP:\n');
    qrcode.generate(qr, { small: true });
    console.log('\n‚ö†Ô∏è  Abra o WhatsApp > Aparelhos Conectados > Conectar aparelho\n');
});

client.on('authenticated', () => {
    console.log('‚úÖ Autentica√ß√£o bem-sucedida!');
});

client.on('ready', () => {
    console.log('\n' + '='.repeat(50));
    console.log('‚úÖ BOT DA RACHEL EST√Å ONLINE E FUNCIONANDO!');
    console.log('üåü "Eu vou ver as estrelas..."');
    console.log('='.repeat(50) + '\n');
    console.log('üëÇ Aguardando mensagens...\n');
});

// ============================================
// PROCESSAR MENSAGENS
// ============================================
client.on('message_create', async (message) => {
    try {
        if (!message.body) return;

        const msg = message.body.toLowerCase().trim();
        const userId = message.author || message.from;

        console.log('\n' + '-'.repeat(50));
        console.log(`üì® MENSAGEM: "${message.body}"`);
        console.log(`De: ${message.from}`);
        console.log(`Autor: ${userId}`);
        console.log('-'.repeat(50));

        if (message.isStatus) return;
        if (!msg.startsWith('!')) return;

        let response = '';

     // COMANDO MENU - IMAGEM COM LEGENDA

if (msg === '!menu' || msg === '!ajuda' || msg === '!help') {
    const menuText = `‚ï≠‚ïê‚Ä¢‡≥ã‚úß‡πëü•Ç‡πë‚úß‡≥ã‚Ä¢‚ïê‚ïÆ
     ‚ú® ùêëùêÄùêÇùêáùêÑùêã ùêÅùêéùêì ‚ú®
  ‚≠ê ùë¥ùíÜùíèùíñ ùíÖùíÇ ùëªùíêùíìùíìùíÜ ùíÖùíÜ ùë´ùíÜùíñùíî ‚≠ê
‚ï∞‚ïê‚Ä¢‡≥ã‚úß‡πëü•Ç‡πë‚úß‡≥ã‚Ä¢‚ïê‚ïØ

"Eu vou ver as estrelas... n√£o importa o que aconte√ßa."

‚ï≠‚ïê‚Ä¢‡≥ã‚úß‡πëü•Ç‡πë‚úß‡≥ã‚Ä¢‚ïê‚ïÆ
  ùêíùêàùêíùêìùêÑùêåùêÄ & ùêíùêìùêÄùêìùêîùêí
‚ï∞‚ïê‚Ä¢‡≥ã‚úß‡πëü•Ç‡πë‚úß‡≥ã‚Ä¢‚ïê‚ïØ
‚ïé‚Åë€£€ú€úÕúÕ°‚≠ê !nivel - Status completo
‚ïé‚Åë€£€ú€úÕúÕ°‚≠ê !xp - Ver XP atual
‚ïé‚Åë€£€ú€úÕúÕ°‚≠ê !vida - Ver vida atual
‚ïé‚Åë€£€ú€úÕúÕ°‚≠ê !perfil - Seu perfil completo
‚ïé‚Åë€£€ú€úÕúÕ°‚≠ê !teste - Testar bot
‚ïé‚Åë€£€ú€úÕúÕ°‚≠ê !criador - Info do criador

‚ï≠‚ïê‚Ä¢‡≥ã‚úß‡πëü•Ç‡πë‚úß‡≥ã‚Ä¢‚ïê‚ïÆ
  ùêëùêÄùêçùêäùêàùêçùêÜùêí & ùêìùêéùêè
‚ï∞‚ïê‚Ä¢‡≥ã‚úß‡πëü•Ç‡πë‚úß‡≥ã‚Ä¢‚ïê‚ïØ
‚ïé‚Åë€£€ú€úÕúÕ°‚≠ê !ranking - Top 10 n√≠veis
‚ïé‚Åë€£€ú€úÕúÕ°‚≠ê !rank - Atalho ranking
‚ïé‚Åë€£€ú€úÕúÕ°‚≠ê !top - Atalho top
‚ïé‚Åë€£€ú€úÕúÕ°‚≠ê !toprico - Top 10 mais ricos
‚ïé‚Åë€£€ú€úÕúÕ°‚≠ê !topmoedas - Atalho top moedas
‚ïé‚Åë€£€ú€úÕúÕ°‚≠ê !toppoder - Top 10 mais fortes
‚ïé‚Åë€£€ú€úÕúÕ°‚≠ê !topforte - Atalho top forte

‚ï≠‚ïê‚Ä¢‡≥ã‚úß‡πëü•Ç‡πë‚úß‡≥ã‚Ä¢‚ïê‚ïÆ
  ùêÑùêÇùêéùêçùêéùêåùêàùêÄ
‚ï∞‚ïê‚Ä¢‡≥ã‚úß‡πëü•Ç‡πë‚úß‡≥ã‚Ä¢‚ïê‚ïØ
‚ïé‚Åë€£€ú€úÕúÕ°‚≠ê !daily - Recompensa di√°ria
‚ïé‚Åë€£€ú€úÕúÕ°‚≠ê !diario - Atalho daily
‚ïé‚Åë€£€ú€úÕúÕ°‚≠ê !trabalhar - Ganhar moedas
‚ïé‚Åë€£€ú€úÕúÕ°‚≠ê !saldo - Ver suas moedas
‚ïé‚Åë€£€ú€úÕúÕ°‚≠ê !apostar - Apostar moedas

‚ï≠‚ïê‚Ä¢‡≥ã‚úß‡πëü•Ç‡πë‚úß‡≥ã‚Ä¢‚ïê‚ïÆ
  ùêìùêéùêëùêëùêÑ & ùêÄùêïùêÑùêçùêìùêîùêëùêÄ
‚ï∞‚ïê‚Ä¢‡≥ã‚úß‡πëü•Ç‡πë‚úß‡≥ã‚Ä¢‚ïê‚ïØ
‚ïé‚Åë€£€ú€úÕúÕ°‚≠ê !explorar - Explorar a Torre
‚ïé‚Åë€£€ú€úÕúÕ°‚≠ê !desafiar @user - Duelar
‚ïé‚Åë€£€ú€úÕúÕ°‚≠ê !duelar @user - Atalho desafiar
‚ïé‚Åë€£€ú€úÕúÕ°‚≠ê !atacar - Atacar na batalha
‚ïé‚Åë€£€ú€úÕúÕ°‚≠ê !attack - Atalho atacar
‚ïé‚Åë€£€ú€úÕúÕ°‚≠ê !batalhas - Ver duelos ativos
‚ïé‚Åë€£€ú€úÕúÕ°‚≠ê !duelos - Atalho batalhas

‚ï≠‚ïê‚Ä¢‡≥ã‚úß‡πëü•Ç‡πë‚úß‡≥ã‚Ä¢‚ïê‚ïÆ
  ùêãùêéùêâùêÄ & ùêàùêìùêÑùêçùêí
‚ï∞‚ïê‚Ä¢‡≥ã‚úß‡πëü•Ç‡πë‚úß‡≥ã‚Ä¢‚ïê‚ïØ
‚ïé‚Åë€£€ú€úÕúÕ°‚≠ê !loja - Ver loja
‚ïé‚Åë€£€ú€úÕúÕ°‚≠ê !comprar [item] - Comprar item
‚ïé‚Åë€£€ú€úÕúÕ°‚≠ê !inventario - Ver seus itens
‚ïé‚Åë€£€ú€úÕúÕ°‚≠ê !invent√°rio - Atalho invent√°rio
‚ïé‚Åë€£€ú€úÕúÕ°‚≠ê !usar [item] - Usar item
‚ïé‚Åë€£€ú€úÕúÕ°‚≠ê !vender [item] - Vender item

‚ï≠‚ïê‚Ä¢‡≥ã‚úß‡πëü•Ç‡πë‚úß‡≥ã‚Ä¢‚ïê‚ïÆ
  ùêâùêéùêÜùêéùêí & ùêÉùêàùêïùêÑùêëùêíùêÄÃÉùêé
‚ï∞‚ïê‚Ä¢‡≥ã‚úß‡πëü•Ç‡πë‚úß‡≥ã‚Ä¢‚ïê‚ïØ
‚ïé‚Åë€£€ú€úÕúÕ°‚≠ê !forca - Jogo da forca
‚ïé‚Åë€£€ú€úÕúÕ°‚≠ê !rf [letra] - Responder forca
‚ïé‚Åë€£€ú€úÕúÕ°‚≠ê !caracoroa [cara/coroa] [valor] - Apostar
‚ïé‚Åë€£€ú€úÕúÕ°‚≠ê !coinflip [cara/coroa] [valor] - Atalho cara coroa
‚ïé‚Åë€£€ú€úÕúÕ°‚≠ê !slot [valor] - Ca√ßa-n√≠quel
‚ïé‚Åë€£€ú€úÕúÕ°‚≠ê !dado - Rolar dado
‚ïé‚Åë€£€ú€úÕúÕ°‚≠ê !dice - Atalho dado
‚ïé‚Åë€£€ú€úÕúÕ°‚≠ê !piada - Piada aleat√≥ria

‚ï≠‚ïê‚Ä¢‡≥ã‚úß‡πëü•Ç‡πë‚úß‡≥ã‚Ä¢‚ïê‚ïÆ
  ùêíùêéùêÇùêàùêÄùêã & ùêìùêëùêéùêÇùêÄùêí
‚ï∞‚ïê‚Ä¢‡≥ã‚úß‡πëü•Ç‡πë‚úß‡≥ã‚Ä¢‚ïê‚ïØ
‚ïé‚Åë€£€ú€úÕúÕ°‚≠ê !casar @user - Propor casamento
‚ïé‚Åë€£€ú€úÕúÕ°‚≠ê !aceitarcasamento - Aceitar pedido
‚ïé‚Åë€£€ú€úÕúÕ°‚≠ê !divorciar - Div√≥rcio
‚ïé‚Åë€£€ú€úÕúÕ°‚≠ê !div√≥rcio - Atalho div√≥rcio
‚ïé‚Åë€£€ú€úÕúÕ°‚≠ê !casal - Info do relacionamento
‚ïé‚Åë€£€ú€úÕúÕ°‚≠ê !presentear @user [valor] - Dar presente
‚ïé‚Åë€£€ú€úÕúÕ°‚≠ê !trocar @user [item1] [item2] - Trocar itens
‚ïé‚Åë€£€ú€úÕúÕ°‚≠ê !aceitartroca [ID] - Aceitar troca
‚ïé‚Åë€£€ú€úÕúÕ°‚≠ê !minhatrocas - Ver suas propostas
‚ïé‚Åë€£€ú€úÕúÕ°‚≠ê !trocas - Atalho minhatrocas

‚ï≠‚ïê‚Ä¢‡≥ã‚úß‡πëü•Ç‡πë‚úß‡≥ã‚Ä¢‚ïê‚ïÆ
  ùêàùêçùêìùêÑùêëùêÄùêÇÃßùêÄÃÉùêé
‚ï∞‚ïê‚Ä¢‡≥ã‚úß‡πëü•Ç‡πë‚úß‡≥ã‚Ä¢‚ïê‚ïØ
‚ïé‚Åë€£€ú€úÕúÕ°‚≠ê !quote - Frase da Rachel
‚ïé‚Åë€£€ú€úÕúÕ°‚≠ê !frase - Atalho quote
‚ïé‚Åë€£€ú€úÕúÕ°‚≠ê !perguntar [pergunta] - Perguntar
‚ïé‚Åë€£€ú€úÕúÕ°‚≠ê !conselho - Conselho da Rachel
‚ïé‚Åë€£€ú€úÕúÕ°‚≠ê !sticker - Criar figurinha
‚ïé‚Åë€£€ú€úÕúÕ°‚≠ê !s - Atalho sticker
‚ïé‚Åë€£€ú€úÕúÕ°‚≠ê !fig - Atalho fig
‚ïé‚Åë€£€ú€úÕúÕ°‚≠ê !stickernome [texto] - Figurinha customizada
‚ïé‚Åë€£€ú€úÕúÕ°‚≠ê !sn [texto] - Atalho stickernome
‚ïé‚Åë€£€ú€úÕúÕ°‚≠ê !stickersem - Figurinha sem marca
‚ïé‚Åë€£€ú€úÕúÕ°‚≠ê !ss - Atalho stickersem
‚ïé‚Åë€£€ú€úÕúÕ°‚≠ê !stickerinfo - Info sobre stickers
‚ïé‚Åë€£€ú€úÕúÕ°‚≠ê !infofi - Atalho stickerinfo

‚ï≠‚ïê‚Ä¢‡≥ã‚úß‡πëü•Ç‡πë‚úß‡≥ã‚Ä¢‚ïê‚ïÆ
  ùêÇùêéùêåùêÄùêçùêÉùêéùêí ùêÄùêÉùêåùêàùêç
‚ï∞‚ïê‚Ä¢‡≥ã‚úß‡πëü•Ç‡πë‚úß‡≥ã‚Ä¢‚ïê‚ïØ
‚ïé‚Åë€£€ú€úÕúÕ°‚≠ê !ban @user - Banir usu√°rio
‚ïé‚Åë€£€ú€úÕúÕ°‚≠ê !promover @user - Promover admin
‚ïé‚Åë€£€ú€úÕúÕ°‚≠ê !rebaixar @user - Rebaixar admin
‚ïé‚Åë€£€ú€úÕúÕ°‚≠ê !advertir @user [motivo] - Advertir
‚ïé‚Åë€£€ú€úÕúÕ°‚≠ê !mute - Silenciar grupo
‚ïé‚Åë€£€ú€úÕúÕ°‚≠ê !desmute - Dessilenciar grupo
‚ïé‚Åë€£€ú€úÕúÕ°‚≠ê !marcar - Marcar todos
‚ïé‚Åë€£€ú€úÕúÕ°‚≠ê !admins - Ver lista de admins
‚ïé‚Åë€£€ú€úÕúÕ°‚≠ê !infogrupo - Info do grupo
‚ïé‚Åë€£€ú€úÕúÕ°‚≠ê !banghost - Ban Ghost (‚ö†Ô∏è Perigo!)
‚ïé‚Åë€£€ú€úÕúÕ°‚≠ê !confirmarban - Confirmar ban ghost
‚ïé‚Åë€£€ú€úÕúÕ°‚≠ê !cancelar - Cancelar opera√ß√£o

‚ï≠‚ïê‚Ä¢‡≥ã‚úß‡πëü•Ç‡πë‚úß‡≥ã‚Ä¢‚ïê‚ïÆ
  ‚ö° ùêÄùêìùêÄùêãùêáùêéùêí & ùêàùêçùêìùêé
‚ï∞‚ïê‚Ä¢‡≥ã‚úß‡πëü•Ç‡πë‚úß‡≥ã‚Ä¢‚ïê‚ïØ
‚ïé‚Åë€£€ú€úÕúÕ°‚≠ê !ajuda - Ver este menu
‚ïé‚Åë€£€ú€úÕúÕ°‚≠ê !help - Atalho ajuda
‚ïé‚Åë€£€ú€úÕúÕ°‚≠ê !menu - Atalho menu
‚ïé‚Åë€£€ú€úÕúÕ°‚≠ê !criador - Info do criador
‚ïé‚Åë€£€ú€úÕúÕ°‚≠ê !creator - Atalho criador
‚ïé‚Åë€£€ú€úÕúÕ°‚≠ê !dev - Atalho criador

‚ï≠‚ïê‚Ä¢‡≥ã‚úß‡πëü•Ç‡πë‚úß‡≥ã‚Ä¢‚ïê‚ïÆ
  üí° ùêÉùêàùêÇùêÄùêí ùêîÃÅùêìùêÑùêàùêí
‚ï∞‚ïê‚Ä¢‡≥ã‚úß‡πëü•Ç‡πë‚úß‡≥ã‚Ä¢‚ïê‚ïØ
üí∞ Ganhe moedas: !trabalhar, !explorar, !daily
üìà Suba de n√≠vel: Jogue qualquer mini-jogo
üíç Social: Fa√ßa amizades, case-se, troque itens
üéÆ Divers√£o: Forca, caracoroa, slot, dados
üñºÔ∏è Criativo: Crie figurinhas personalizadas

‚ï≠‚ïê‚Ä¢‡≥ã‚úß‡πëü•Ç‡πë‚úß‡≥ã‚Ä¢‚ïê‚ïÆ
"ùë∫ùíñùíÉùíÇ ùíÇ ùëªùíêùíìùíìùíÜ ùíÑùíêùíéùíäùíàùíê.
ùëΩùíÇùíéùíêùíî ùíóùíÜùíì ùíÇùíî ùíÜùíîùíïùíìùíÜùíçùíÇùíî ùíãùíñùíèùíïùíêùíî."
‚ï∞‚ïê‚Ä¢‡≥ã‚úß‡πëü•Ç‡πë‚úß‡≥ã‚Ä¢‚ïê‚ïØ

‚ú® ùêÅùêò: ùêëùêÄùêÇùêáùêÑùêã ùêÅùêéùêì ‚ú®
üåü "ùë®ùíî ùíÜùíîùíïùíìùíÜùíçùíÇùíî ùíèùíêùíî ùíÜùíîùíëùíÜùíìùíÇùíé..." üåü`;

    try {
        // Procura por extens√µes de imagem comuns
        const imageExtensions = ['jpg', 'jpeg', 'png', 'webp'];
        let imagePath = null;

        for (const ext of imageExtensions) {
            const testPath = path.join(__dirname, 'media', `menu.${ext}`);
            if (fs.existsSync(testPath)) {
                imagePath = testPath;
                console.log('‚úÖ Imagem encontrada:', testPath);
                break;
            }
        }

        if (!imagePath) {
            console.log('‚ùå Nenhuma imagem do menu encontrada em media/');
            console.log('üí° Procurando: menu.jpg, menu.jpeg, menu.png, menu.webp');
            await message.reply(menuText);
            return;
        }

        // L√™ a imagem e cria o MessageMedia
        const fileData = fs.readFileSync(imagePath, { encoding: 'base64' });
        const extension = path.extname(imagePath).toLowerCase().replace('.', '');
        const mimeType = extension === 'jpg' || extension === 'jpeg' ? 'image/jpeg' : `image/${extension}`;
        
        const menuMedia = new MessageMedia(mimeType, fileData, `menu.${extension}`);
        
        console.log('üì§ Enviando imagem com legenda...');
        
        await client.sendMessage(message.from, menuMedia, {
            caption: menuText
        });
        
        console.log('‚úÖ Menu enviado com sucesso!');

    } catch (error) {
        console.error('‚ùå Erro ao enviar menu:', error.message);
        console.error('Stack:', error.stack);
        await message.reply('‚ùå Ocorreu um erro ao enviar o menu. Tente novamente.');
    }
}
// COMANDO !CRIADOR
// Cole este c√≥digo no seu bot.js junto com os outros comandos

if (msg === '!criador' || msg === '!creator' || msg === '!dev') {
    const criadorText = `‚ï≠‚ïê‚Ä¢‡≥ã‚úß‡πëü•Ç‡πë‚úß‡≥ã‚Ä¢‚ïê‚ïÆ
     üëë ùêÇùêëùêàùêÄùêÉùêéùêë ùêÉùêé ùêÅùêéùêì üëë
‚ï∞‚ïê‚Ä¢‡≥ã‚úß‡πëü•Ç‡πë‚úß‡≥ã‚Ä¢‚ïê‚ïØ

‚ú® *Ol√°! Eu sou a Rachel Bot* ‚ú®

Fui criada com muito carinho e dedica√ß√£o
para trazer divers√£o e aventura inspirada
na Torre de Deus! üóº

‚ï≠‚ïê‚Ä¢‡≥ã‚úß‡πëü•Ç‡πë‚úß‡≥ã‚Ä¢‚ïê‚ïÆ
  üíé ùêàùêçùêÖùêéùêëùêåùêÄùêÇÃßùêéÃÉùêÑùêí
‚ï∞‚ïê‚Ä¢‡≥ã‚úß‡πëü•Ç‡πë‚úß‡≥ã‚Ä¢‚ïê‚ïØ

üë§ *Desenvolvedor:* [Light shizuke]
üì± *Contato:* [+55 35 998381353]
üåê *GitHub:* [Lightshzk]
üíª *Tecnologias:* Node.js + whatsapp-web.js

‚ï≠‚ïê‚Ä¢‡≥ã‚úß‡πëü•Ç‡πë‚úß‡≥ã‚Ä¢‚ïê‚ïÆ
"Cada linha de c√≥digo foi escrita
pensando em criar a melhor experi√™ncia
para voc√™ subir a Torre!" üåü
‚ï∞‚ïê‚Ä¢‡≥ã‚úß‡πëü•Ç‡πë‚úß‡≥ã‚Ä¢‚ïê‚ïØ

üí° *Quer sugerir melhorias?*
Entre em contato comigo!

‚ú® ùêëùêÄùêÇùêáùêÑùêã ùêÅùêéùêì - ùêïùêûùê´ùê¨ùêöÃÉùê® ùüè.ùüé ‚ú®
üåü "As estrelas nos esperam..." üåü`;

    try {
        await message.reply(criadorText);
        console.log('‚úÖ Comando !criador executado');
    } catch (error) {
        console.error('‚ùå Erro no comando !criador:', error.message);
    }
}
        else if (msg === '!teste' || msg === '!test') {
            response = "‚úÖ Estou funcionando perfeitamente. A Torre me aguarda...";
        }

        else if (msg === '!quote' || msg === '!frase') {
            const allQuotes = [...rachelPersonality.aboutHer, ...rachelPersonality.aboutBam, ...rachelPersonality.aboutTower, ...rachelPersonality.manipulation];
            response = `üí≠ "${getRandomResponse(allQuotes)}"`;
        }

        else if (msg === '!perfil') {
            let nomePerfil = 'Andarilho';
            let numeroWhats = 'Desconhecido';
            try {
                const contato = await message.getContact();
                if (contato) {
                    if (contato.pushname) nomePerfil = contato.pushname;
                    if (contato.number) numeroWhats = contato.number;
                }
            } catch (e) {
                nomePerfil = 'Andarilho';
            }
            
            response = `üë§ *Seu Perfil*
‚Ä¢ Nome: ${nomePerfil}
‚Ä¢ N√∫mero: ${numeroWhats}
‚Ä¢ Rachel te julga: "Voc√™ nunca subiria a Torre..."`;
        }

        else if (msg === '!piada') {
            const piadas = [
                "Por que o Bam leva sempre uma escada? Porque ele n√£o confia em elevadores da Torre!",
                "O que acontece se voc√™ desafiar o Khun para uma corrida? Prepare-se para perder, e r√°pido!",
                "Qual √© a bebida favorita dos habitantes da Torre? Energ√©tico‚Ä¶ porque ningu√©m descansa por aqui!",
                "Por que a Rachel nunca perde uma estrela? Porque ela tem sempre um plano‚Ä¶ e uma boa desculpa!"
            ];
            response = `üòÇ ${getRandomResponse(piadas)}`;
        }

        else if (msg === '!nivel') {
            inicializarJogador(userId);
            const nivel = torreXP[userId].nivel;
            const xp = torreXP[userId].xp;
            const xpProximo = torreXP[userId].xpProximoNivel;
            const vida = torreVida[userId] || 100;
            const poder = calcularPoder(userId);
            const moedas = torreMoney[userId] || 0;
            
            response = `‚ö° *SEU STATUS* ‚ö°\n\nüìä N√≠vel: ${nivel}\nüí´ XP: ${xp}/${xpProximo}\n‚ù§Ô∏è Vida: ${vida}/100\n‚öîÔ∏è Poder: ${poder}\nüí∞ Moedas: ${moedas}`;
        }

        else if (msg === '!xp') {
            inicializarJogador(userId);
            const xp = torreXP[userId].xp;
            const xpProximo = torreXP[userId].xpProximoNivel;
            response = `üí´ XP Atual: ${xp}/${xpProximo}`;
        }

        else if (msg === '!forca') {
            const groupId = message.from;
            
            if (forcaGames.has(groupId)) {
                await message.reply('‚ö†Ô∏è J√° existe um jogo da forca em andamento! Use !rf [letra] ou !rf [palavra] para jogar.');
                return;
            }

            const escolhido = palavrasForca[Math.floor(Math.random() * palavrasForca.length)];
            
            forcaGames.set(groupId, {
                palavra: escolhido.palavra.toLowerCase(),
                dica: escolhido.dica,
                letrasReveladas: Array(escolhido.palavra.length).fill('_'),
                letrasUsadas: [],
                tentativas: 6,
                jogadores: new Set(),
                timestamp: Date.now()
            });

            const display = forcaGames.get(groupId).letrasReveladas.join(' ');
            
            const forcaText = `‚ï≠‚ïê‚Ä¢‡≥ã‚úß‡πëü•Ç‡πë‚úß‡≥ã‚Ä¢‚ïê‚ïÆ
     üéÆ ùêâùêéùêÜùêé ùêÉùêÄ ùêÖùêéùêëùêÇùêÄ üéÆ
‚ï∞‚ïê‚Ä¢‡≥ã‚úß‡πëü•Ç‡πë‚úß‡≥ã‚Ä¢‚ïê‚ïØ

${desenharForca(6)}

üìù Palavra: ${display}
üí° Dica: ${escolhido.dica}
‚ùå Erros: 0/6
üíÄ Letras erradas: -

‚ïé‚Åë€£€ú€úÕúÕ°‚≠ê Use !rf [letra] para uma letra
‚ïé‚Åë€£€ú€úÕúÕ°‚≠ê Use !rf [palavra] para palavra completa

üéØ Todos podem jogar juntos!`;

            await message.reply(forcaText);
            console.log('‚úÖ Jogo da forca iniciado:', escolhido.palavra);
        }

        else if (msg.startsWith('!rf ')) {
            const groupId = message.from;
            const playerId = message.author || message.from;
            
            if (!forcaGames.has(groupId)) {
                response = '‚ö†Ô∏è N√£o h√° jogo da forca em andamento! Use !forca para come√ßar.';
            } else {
                const game = forcaGames.get(groupId);
                const resposta = msg.substring(4).trim().toLowerCase();

                // Adiciona jogador √† lista
                game.jogadores.add(playerId);

                // Tenta palavra completa
                if (resposta.length > 1) {
                    if (resposta === game.palavra) {
                        // ACERTOU A PALAVRA!
                        const vencedorText = `‚ï≠‚ïê‚Ä¢‡≥ã‚úß‡πëü•Ç‡πë‚úß‡≥ã‚Ä¢‚ïê‚ïÆ
     üéâ ùêèùêÄùêëùêÄùêÅùêÑÃÅùêçùêí! üéâ
‚ï∞‚ïê‚Ä¢‡≥ã‚úß‡πëü•Ç‡πë‚úß‡≥ã‚Ä¢‚ïê‚ïØ

${desenharForca(game.tentativas)}

‚úÖ A palavra era: *${game.palavra.toUpperCase()}*
üèÜ Palavra completa acertada!

üë• Jogadores participantes: ${game.jogadores.size}
üí∞ Recompensa: +${game.jogadores.size * 50} moedas cada

üåü "Voc√™s subiram a Torre juntos!" üåü`;

                        await message.reply(vencedorText);
                        
                        // Recompensa para todos
                        for (const jogador of game.jogadores) {
                            torreMoney[jogador] = (torreMoney[jogador] || 0) + (game.jogadores.size * 50);
                            adicionarXP(jogador, 60);
                        }
                        salvarMoney();
                        
                        forcaGames.delete(groupId);
                        console.log('‚úÖ Palavra completa acertada:', game.palavra);
                        return;
                    } else {
                        // ERROU A PALAVRA
                        game.tentativas--;
                        
                        if (game.tentativas <= 0) {
                            const gameOverText = `‚ï≠‚ïê‚Ä¢‡≥ã‚úß‡πëü•Ç‡πë‚úß‡≥ã‚Ä¢‚ïê‚ïÆ
     üíÄ ùêÜùêÄùêåùêÑ ùêéùêïùêÑùêë üíÄ
‚ï∞‚ïê‚Ä¢‡≥ã‚úß‡πëü•Ç‡πë‚úß‡≥ã‚Ä¢‚ïê‚ïØ

${desenharForca(0)}

‚ùå A palavra era: *${game.palavra.toUpperCase()}*
üí≠ Dica: ${game.dica}
üò¢ Palavra "${resposta}" estava errada!

üë• Jogadores que tentaram: ${game.jogadores.size}

üåü "A Torre n√£o perdoa erros..." üåü`;

                            await message.reply(gameOverText);
                            forcaGames.delete(groupId);
                            console.log('‚ùå Game Over - Palavra errada');
                            return;
                        } else {
                            const display = game.letrasReveladas.join(' ');
                            const errosText = game.letrasUsadas.filter(l => !game.palavra.includes(l)).join(', ');
                            
                            const erroText = `‚ï≠‚ïê‚Ä¢‡≥ã‚úß‡πëü•Ç‡πë‚úß‡≥ã‚Ä¢‚ïê‚ïÆ
     ‚ùå ùêèùêÄùêãùêÄùêïùêëùêÄ ùêÑùêëùêëùêÄùêÉùêÄ! ‚ùå
‚ï∞‚ïê‚Ä¢‡≥ã‚úß‡πëü•Ç‡πë‚úß‡≥ã‚Ä¢‚ïê‚ïØ

${desenharForca(game.tentativas)}

üìù Palavra: ${display}
‚ùå "${resposta}" n√£o √© a palavra!
üíÄ Erros: ${6 - game.tentativas}/6
üí° Letras erradas: ${errosText || '-'}

üéØ Continue tentando!`;

                            await message.reply(erroText);
                            return;
                        }
                    }
                }

                // Valida√ß√£o de letra √∫nica
                const letra = resposta;
                if (!/^[a-z]$/.test(letra)) {
                    response = '‚ö†Ô∏è Use apenas UMA letra ou a PALAVRA COMPLETA!\n\nExemplo: !rf a ou !rf rachel';
                } else if (game.letrasUsadas.includes(letra)) {
                    response = `‚ö†Ô∏è A letra *${letra}* j√° foi usada! Tente outra.`;
                } else {
                    game.letrasUsadas.push(letra);
                    
                    // Verifica se acertou
                    let acertou = false;
                    for (let i = 0; i < game.palavra.length; i++) {
                        if (game.palavra[i] === letra) {
                            game.letrasReveladas[i] = letra;
                            acertou = true;
                        }
                    }

                    if (acertou) {
                        const display = game.letrasReveladas.join(' ');
                        
                        // Verifica se completou
                        if (!game.letrasReveladas.includes('_')) {
                            const vencedorText = `‚ï≠‚ïê‚Ä¢‡≥ã‚úß‡πëü•Ç‡πë‚úß‡≥ã‚Ä¢‚ïê‚ïÆ
     üéâ ùêèùêÄùêëùêÄùêÅùêÑÃÅùêçùêí! üéâ
‚ï∞‚ïê‚Ä¢‡≥ã‚úß‡πëü•Ç‡πë‚úß‡≥ã‚Ä¢‚ïê‚ïØ

${desenharForca(game.tentativas)}

‚úÖ A palavra era: *${game.palavra.toUpperCase()}*
üèÜ Completada com sucesso!

üë• Jogadores participantes: ${game.jogadores.size}
üí∞ Recompensa: +30 moedas cada

üåü "Voc√™s subiram a Torre juntos!" üåü`;

                            await message.reply(vencedorText);
                            
                            for (const jogador of game.jogadores) {
                                torreMoney[jogador] = (torreMoney[jogador] || 0) + 30;
                                adicionarXP(jogador, 40);
                            }
                            salvarMoney();
                            
                            forcaGames.delete(groupId);
                            console.log('‚úÖ Forca completada:', game.palavra);
                            return;
                        } else {
                            const errosText = game.letrasUsadas.filter(l => !game.palavra.includes(l)).join(', ');
                            
                            response = `‚ï≠‚ïê‚Ä¢‡≥ã‚úß‡πëü•Ç‡πë‚úß‡≥ã‚Ä¢‚ïê‚ïÆ
     ‚úÖ ùêãùêÑùêìùêëùêÄ ùêÇùêéùêëùêëùêÑùêìùêÄ! ‚úÖ
‚ï∞‚ïê‚Ä¢‡≥ã‚úß‡πëü•Ç‡πë‚úß‡≥ã‚Ä¢‚ïê‚ïØ

${desenharForca(game.tentativas)}

üìù Palavra: ${display}
‚úÖ Letra *${letra}* encontrada!
‚ùå Erros: ${6 - game.tentativas}/6
üí° Letras erradas: ${errosText || '-'}

üéØ Continue! Todos podem jogar!`;
                        }
                    } else {
                        // LETRA ERRADA
                        game.tentativas--;
                        
                        if (game.tentativas <= 0) {
                            const gameOverText = `‚ï≠‚ïê‚Ä¢‡≥ã‚úß‡πëü•Ç‡πë‚úß‡≥ã‚Ä¢‚ïê‚ïÆ
     üíÄ ùêÜùêÄùêåùêÑ ùêéùêïùêÑùêë üíÄ
‚ï∞‚ïê‚Ä¢‡≥ã‚úß‡πëü•Ç‡πë‚úß‡≥ã‚Ä¢‚ïê‚ïØ

${desenharForca(0)}

‚ùå A palavra era: *${game.palavra.toUpperCase()}*
üí≠ Dica: ${game.dica}

üë• Jogadores que tentaram: ${game.jogadores.size}

üåü "A Torre n√£o perdoa erros..." üåü`;

                            await message.reply(gameOverText);
                            forcaGames.delete(groupId);
                            console.log('‚ùå Game Over');
                            return;
                        } else {
                            const display = game.letrasReveladas.join(' ');
                            const errosText = game.letrasUsadas.filter(l => !game.palavra.includes(l)).join(', ');
                            
                            response = `‚ï≠‚ïê‚Ä¢‡≥ã‚úß‡πëü•Ç‡πë‚úß‡≥ã‚Ä¢‚ïê‚ïÆ
     ‚ùå ùêãùêÑùêìùêëùêÄ ùêÑùêëùêëùêÄùêÉùêÄ! ‚ùå
‚ï∞‚ïê‚Ä¢‡≥ã‚úß‡πëü•Ç‡πë‚úß‡≥ã‚Ä¢‚ïê‚ïØ

${desenharForca(game.tentativas)}

üìù Palavra: ${display}
‚ùå Letra *${letra}* n√£o est√° na palavra
üíÄ Erros: ${6 - game.tentativas}/6
üí° Letras erradas: ${errosText}

üéØ Tentem outra letra ou palavra!`;
                        }
                    }
                }
            }
        }

        else if (msg === '!ranking' || msg === '!rank' || msg === '!top') {
            const topNivel = getTopRanking('nivel', 10);
            
            let texto = 'üèÜ *RANKING DA TORRE* üèÜ\n';
            texto += '‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n';
            
            for (let i = 0; i < topNivel.length; i++) {
                const numero = topNivel[i].userId.replace('@c.us', '').replace('@s.whatsapp.net', '');
                const medal = getMedalha(i + 1);
                texto += `${medal} N√≠vel ${topNivel[i].valor} - (${topNivel[i].xp} XP)\n`;
                texto += `   ${numero.slice(-4)}\n\n`;
            }
            
            const todasPosicoes = getTopRanking('nivel', 999);
            const minhaPos = todasPosicoes.findIndex(p => p.userId === userId) + 1;
            
            if (minhaPos > 10) {
                texto += `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n`;
                texto += `üìç Sua posi√ß√£o: ${minhaPos}¬∫\n`;
                texto += `‚ö° N√≠vel: ${torreXP[userId]?.nivel || 1}`;
            }
            
            response = texto;
        }

        else if (msg === '!toprico' || msg === '!topmoedas') {
            const topMoedas = getTopRanking('moedas', 10);
            let texto = 'üí∞ *TOP MAIS RICOS* üí∞\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n';
            
            for (let i = 0; i < topMoedas.length; i++) {
                texto += `${getMedalha(i + 1)} ${topMoedas[i].valor} moedas\n\n`;
            }
            
            response = texto;
        }

        else if (msg === '!toppoder' || msg === '!topforte') {
            const topPoder = getTopRanking('poder', 10);
            let texto = '‚öîÔ∏è *TOP MAIS FORTES* ‚öîÔ∏è\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n';
            
            for (let i = 0; i < topPoder.length; i++) {
                texto += `${getMedalha(i + 1)} Poder ${topPoder[i].valor}\n\n`;
            }
            
            response = texto;
        }

        else if (msg === '!daily' || msg === '!diario') {
            const resultado = verificarDaily(userId);
            
            if (!resultado.disponivel) {
                const proximoDaily = new Date();
                proximoDaily.setDate(proximoDaily.getDate() + 1);
                proximoDaily.setHours(0, 0, 0, 0);
                
                const horasRestantes = Math.floor((proximoDaily - new Date()) / 1000 / 60 / 60);
                const minutosRestantes = Math.floor(((proximoDaily - new Date()) / 1000 / 60) % 60);
                
                response = `‚è∞ ${resultado.mensagem}\n\n‚è≥ Pr√≥ximo daily em: ${horasRestantes}h ${minutosRestantes}m\nüî• Streak atual: ${torreDaily[userId]?.streak || 0} dias`;
            } else {
                response = `üéÅ *RECOMPENSA DI√ÅRIA COLETADA!* üéÅ\n\nüí∞ +${resultado.moedas} moedas\n${resultado.xpMsg}\nüî• Streak: ${resultado.streak} dias${resultado.bonus}\n\nüí° Volte amanh√£ para manter o streak!`;
            }
        }

        else if (msg.startsWith('!caracoroa ') || msg.startsWith('!coinflip ')) {
            const partes = msg.split(' ');
            if (partes.length < 3) {
                response = '‚ùå Use: !caracoroa [cara/coroa] [valor]\nEx: !caracoroa cara 50';
            } else {
                const escolha = partes[1].toLowerCase();
                const aposta = parseInt(partes[2]);
                
                if (!['cara', 'coroa'].includes(escolha)) {
                    response = '‚ùå Escolha "cara" ou "coroa"!';
                } else if (isNaN(aposta) || aposta < 10) {
                    response = '‚ùå Aposta m√≠nima: 10 moedas';
                } else if ((torreMoney[userId] || 0) < aposta) {
                    response = '‚ùå Voc√™ n√£o tem moedas suficientes!';
                } else {
                    const resultado = jogarCaraCoroa(escolha);
                    
                    if (resultado.ganhou) {
                        torreMoney[userId] += aposta;
                        response = `ü™ô *${resultado.resultado.toUpperCase()}!*\n\n‚úÖ Voc√™ GANHOU!\nüí∞ +${aposta} moedas\nüíµ Saldo: ${torreMoney[userId]}`;
                    } else {
                        torreMoney[userId] -= aposta;
                        response = `ü™ô *${resultado.resultado.toUpperCase()}!*\n\n‚ùå Voc√™ PERDEU!\nüí∏ -${aposta} moedas\nüíµ Saldo: ${torreMoney[userId]}`;
                    }
                    salvarMoney();
                }
            }
        }

        else if (msg === '!dado' || msg === '!dice') {
            const resultado = rolarDado();
            const emojis = ['‚öÄ', '‚öÅ', '‚öÇ', '‚öÉ', '‚öÑ', '‚öÖ'];
            response = `üé≤ Voc√™ rolou: ${emojis[resultado - 1]} *${resultado}*`;
        }

        else if (msg.startsWith('!slot ')) {
            const aposta = parseInt(msg.replace('!slot ', ''));
            
            if (isNaN(aposta) || aposta < 20) {
                response = '‚ùå Use: !slot [valor]\nAposta m√≠nima: 20 moedas';
            } else if ((torreMoney[userId] || 0) < aposta) {
                response = '‚ùå Voc√™ n√£o tem moedas suficientes!';
            } else {
                const jogo = jogarSlot();
                torreMoney[userId] -= aposta;
                
                let texto = `üé∞ *CA√áA-N√çQUEL* üé∞\n\n${jogo.resultado.join(' | ')}\n\n`;
                
                if (jogo.multiplicador > 0) {
                    const ganho = aposta * jogo.multiplicador;
                    torreMoney[userId] += ganho;
                    texto += `üéâ *VOC√ä GANHOU!*\nüí∞ +${ganho} moedas (${jogo.multiplicador}x)\nüíµ Saldo: ${torreMoney[userId]}`;
                } else {
                    texto += `üò¢ N√£o foi dessa vez...\nüí∏ -${aposta} moedas\nüíµ Saldo: ${torreMoney[userId]}`;
                }
                
                salvarMoney();
                response = texto;
            }
        }

        else if (msg.startsWith('!casar ')) {
            if (!message.mentionedIds || message.mentionedIds.length === 0) {
                response = '‚ùå Marque algu√©m para propor casamento!\nEx: !casar @pessoa';
            } else {
                const parceiro = message.mentionedIds[0];
                
                if (parceiro === userId) {
                    response = '‚ùå Voc√™ n√£o pode casar consigo mesmo!';
                } else {
                    const statusUser = verificarCasado(userId);
                    const statusParceiro = verificarCasado(parceiro);
                    
                    if (statusUser.casado) {
                        response = '‚ùå Voc√™ j√° est√° casado(a)!';
                    } else if (statusParceiro.casado) {
                        response = '‚ùå Esta pessoa j√° est√° casada!';
                    } else if (verificarPropostaCasamento(parceiro)) {
                        response = '‚ùå Esta pessoa j√° tem uma proposta de casamento pendente!';
                    } else {
                        criarPropostaMatrimonio(userId, parceiro);
                        response = `üíç Proposta de casamento enviada!\n\nA pessoa deve aceitar com: !aceitarcasamento`;
                    }
                }
            }
        }

        else if (msg === '!aceitarcasamento') {
            const proposta = verificarPropostaCasamento(userId);
            
            if (!proposta) {
                response = '‚ùå Voc√™ n√£o tem propostas de casamento pendentes!';
            } else {
                criarCasamento(proposta.de, userId);
                deletarPropostaCasamento(userId);
                response = `üíçüíï *CASAMENTO REALIZADO!* üíïüíç\n\nVoc√™s agora s√£o um casal!\n\nüéÅ B√¥nus de casal:\n‚Ä¢ +10% XP quando joga juntos\n‚Ä¢ Comandos especiais de casal\n\nUse !casal para ver informa√ß√µes!`;
            }
        }

        else if (msg === '!divorciar' || msg === '!div√≥rcio') {
            const status = verificarCasado(userId);
            
            if (!status.casado) {
                response = '‚ùå Voc√™ n√£o est√° casado(a)!';
            } else {
                delete torreCasamento[status.casal];
                salvarCasamento();
                response = 'üíî Div√≥rcio realizado... A Torre n√£o perdoa relacionamentos.';
            }
        }

        else if (msg === '!casal') {
            const status = verificarCasado(userId);
            
            if (!status.casado) {
                response = '‚ùå Voc√™ n√£o est√° casado(a)!';
            } else {
                const casal = torreCasamento[status.casal];
                const dataCasamento = new Date(casal.data);
                const diasJuntos = Math.floor((Date.now() - dataCasamento.getTime()) / (1000 * 60 * 60 * 24));
                
                response = `üíë *INFORMA√á√ïES DO CASAL* üíë\n\nüíï Dias juntos: ${diasJuntos}\n‚ú® XP compartilhado: ${casal.xpCompartilhado}\n\n"O amor tamb√©m existe na Torre..."`;
            }
        }

        else if (msg.startsWith('!perguntar ')) {
            const pergunta = msg.replace('!perguntar ', '');
            response = `üí≠ Rachel responde:\n\n"${rachelResponder(pergunta)}"`;
        }

        else if (msg === '!conselho') {
            response = `üí° *Conselho da Rachel:*\n\n"${rachelConselho()}"`;
        }

        else if (msg === '!saldo') {
            const saldo = torreMoney[userId] || 0;
            response = `üí∞ Seu saldo na Torre: ${saldo} moedas.`;
        }

        else if (msg === '!trabalhar') {
            const cooldown = verificarCooldown(userId, 'trabalhar', 60);
            if (cooldown.emCooldown) {
                response = `‚è≥ Aguarde ${cooldown.tempoRestante}s para trabalhar novamente!`;
            } else {
                const ganho = Math.floor(Math.random() * 50) + 10;
                torreMoney[userId] = (torreMoney[userId] || 0) + ganho;
                salvarMoney();
                
                const xpMsg = adicionarXP(userId, 10);
                response = `üõ†Ô∏è Voc√™ trabalhou duro na Torre e ganhou ${ganho} moedas!${xpMsg}\nüí∞ Saldo atual: ${torreMoney[userId]} moedas.`;
            }
        }

        else if (msg === '!explorar') {
            const cooldown = verificarCooldown(userId, 'explorar', 120);
            if (cooldown.emCooldown) {
                response = `‚è≥ Aguarde ${cooldown.tempoRestante}s para explorar novamente!`;
            } else {
                if (torreVida[userId] === undefined) torreVida[userId] = 100;
                let vida = torreVida[userId];

                if (vida <= 0) {
                    response = 'üíÄ Voc√™ est√° sem vida! Use uma po√ß√£o para se curar.';
                    return;
                } else {
                    const andares = ["Andar 2 - Campo de Testes", "Andar 5 - Floresta dos Guerreiros", "Andar 13 - Lago do Shinsu", "Andar 20 - Torre dos Deuses"];
                    const eventos = ["encontrou um ba√∫ misterioso", "lutou contra um monstro e venceu", "achou moedas perdidas", "recebeu ajuda de um guia"];

                    const andar = andares[Math.floor(Math.random() * andares.length)];
                    const evento = eventos[Math.floor(Math.random() * eventos.length)];
                    const ganhoMoedas = Math.floor(Math.random() * 50) + 10;

                    let texto = `üß≠ Voc√™ explorou o *${andar}* e ${evento}!\n`;
                    texto += `üí∞ Voc√™ ganhou *${ganhoMoedas} moedas!*`;

                    torreMoney[userId] = (torreMoney[userId] || 0) + ganhoMoedas;
                    salvarMoney();

                    const xpMsg = adicionarXP(userId, 20);
                    texto += xpMsg;

                    if (Math.random() < 0.3) {
                        const dano = Math.floor(Math.random() * 20) + 5;
                        vida = Math.max(0, vida - dano);
                        texto += `\nüíî Voc√™ perdeu *${dano} de vida* durante a explora√ß√£o!`;
                    }

                    torreVida[userId] = vida;
                    salvarVida();
                    texto += `\n‚ù§Ô∏è Vida atual: ${vida}/100`;
                    response = texto;
                }
            }
        }

        else if (msg === '!vida') {
            const vida = torreVida[userId] === undefined ? 100 : torreVida[userId];
            response = `‚ù§Ô∏è Sua vida atual: ${vida}/100`;
        }

        else if (msg === '!loja') {
            response = `üè™ *Loja da Torre*
po√ß√£o - 30 moedas (Recupera 30 de vida)
lanterna - 50 moedas
mapa - 80 moedas
shinsu - 100 moedas

Compre usando: !comprar [item]`;
        }

        else if (msg.startsWith('!comprar ')) {
            const item = msg.replace('!comprar ', '').trim();
            const loja = { "po√ß√£o": 30, "pocao": 30, "lanterna": 50, "mapa": 80, "shinsu": 100 };
            
            if (!loja[item]) {
                response = '‚ùå Item n√£o encontrado na loja. Itens: po√ß√£o, lanterna, mapa, shinsu';
            } else if ((torreMoney[userId] || 0) < loja[item]) {
                response = 'üí∏ Voc√™ n√£o tem moedas suficientes.';
            } else {
                torreMoney[userId] -= loja[item];
                salvarMoney();
                
                if (!torreInventario[userId]) torreInventario[userId] = [];
                torreInventario[userId].push(item);
                salvarInventario();
                
                response = `üõí Voc√™ comprou *${item}* por ${loja[item]} moedas!\nüí∞ Saldo: ${torreMoney[userId]} moedas.`;
            }
        }

        else if (msg === '!inventario' || msg === '!invent√°rio') {
            const itens = torreInventario[userId] || [];
            response = itens.length === 0 ? 'üéí Seu invent√°rio est√° vazio.' : `üéí *Seu invent√°rio:*\n- ${itens.join('\n- ')}`;
        }

        else if (msg.startsWith('!usar ')) {
            const item = msg.replace('!usar ', '').trim();
            const inventario = torreInventario[userId] || [];
            const idx = inventario.findIndex(i => i === item || i === 'po√ß√£o' && item === 'pocao');

            if (idx === -1) {
                response = '‚ùå Voc√™ n√£o possui esse item no invent√°rio.';
            } else if (item === 'po√ß√£o' || item === 'pocao') {
                torreVida[userId] = Math.min((torreVida[userId] || 100) + 30, 100);
                inventario.splice(idx, 1);
                torreInventario[userId] = inventario;
                salvarVida();
                salvarInventario();
                response = `üß™ Voc√™ usou uma *po√ß√£o* e recuperou 30 de vida!\n‚ù§Ô∏è Vida atual: ${torreVida[userId]}/100`;
            } else {
                response = '‚ùå Esse item n√£o pode ser usado agora.';
            }
        }

        else if (msg.startsWith('!vender ')) {
            const item = msg.replace('!vender ', '').trim();
            const inventario = torreInventario[userId] || [];
            const idx = inventario.indexOf(item);
            const precos = { "po√ß√£o": 15, "pocao": 15, "lanterna": 25, "mapa": 40, "shinsu": 50 };

            if (idx === -1) {
                response = '‚ùå Voc√™ n√£o possui esse item no invent√°rio.';
            } else if (!precos[item]) {
                response = '‚ùå Esse item n√£o pode ser vendido.';
            } else {
                inventario.splice(idx, 1);
                torreInventario[userId] = inventario;
                torreMoney[userId] = (torreMoney[userId] || 0) + precos[item];
                salvarInventario();
                salvarMoney();
                response = `üí∏ Voc√™ vendeu *${item}* por ${precos[item]} moedas!`;
            }
        }

        else if (msg.startsWith('!desafiar ') || msg.startsWith('!duelar ')) {
            if (!message.mentionedIds || message.mentionedIds.length === 0) {
                response = '‚ùå Marque algu√©m para desafiar!\nEx: !desafiar @pessoa';
            } else {
                const oponente = message.mentionedIds[0];
                
                if (oponente === userId) {
                    response = '‚ùå Voc√™ n√£o pode desafiar a si mesmo!';
                } else {
                    const batalhaId = iniciarBatalha(userId, oponente);
                    const desafiantePoder = calcularPoder(userId);
                    const oponentePoder = calcularPoder(oponente);
                    
                    response = `‚öîÔ∏è *DESAFIO DE BATALHA!* ‚öîÔ∏è

${(await message.getContact()).pushname} desafiou um oponente para um duelo!

üìä *Status:*
üë§ Desafiante
  ‚Ä¢ N√≠vel: ${torreXP[userId]?.nivel || 1}
  ‚Ä¢ Poder: ${desafiantePoder}
  ‚Ä¢ Vida: ${torreVida[userId] || 100}

üë§ Oponente
  ‚Ä¢ N√≠vel: ${torreXP[oponente]?.nivel || 1}
  ‚Ä¢ Poder: ${oponentePoder}
  ‚Ä¢ Vida: ${torreVida[oponente] || 100}

üéÆ √â a vez de ${(await message.getContact()).pushname}!
Digite *!atacar* para atacar!

‚ö†Ô∏è O perdedor perder√° 30 de vida na Torre!`;
                }
            }
        }

        else if (msg === '!atacar' || msg === '!attack') {
            let batalhaId = null;
            
            for (let id in batalhasAtivas) {
                if (id.includes(userId)) {
                    batalhaId = id;
                    break;
                }
            }
            
            if (!batalhaId) {
                response = '‚ùå Voc√™ n√£o est√° em nenhuma batalha!\nUse !desafiar @pessoa para iniciar um duelo.';
            } else {
                const resultado = atacarBatalha(batalhaId, userId);
                
                if (resultado.erro) {
                    response = `‚ùå ${resultado.erro}`;
                } else if (resultado.vencedor) {
                    response = `üí• *ATAQUE FATAL!* üí•

‚öîÔ∏è Dano causado: ${resultado.dano}
üíî Oponente foi derrotado!

üèÜ *VIT√ìRIA DE ${(await message.getContact()).pushname}!* üèÜ

üéÅ Recompensas:
${resultado.xp}
üí∞ +${resultado.recompensa} moedas

"A Torre reconhece sua for√ßa!"`;
                } else {
                    response = `‚öîÔ∏è *COMBATE!* ‚öîÔ∏è

üí• Dano causado: ${resultado.dano}
üíî Vida do oponente: ${resultado.vidaDefensor}

üéÆ Vez do pr√≥ximo jogador!
Digite *!atacar* para atacar!`;
                }
            }
        }

        else if (msg === '!batalhas' || msg === '!duelos') {
            let batalhasUsuario = [];
            for (let id in batalhasAtivas) {
                if (id.includes(userId)) {
                    batalhasUsuario.push(id);
                }
            }
            
            if (batalhasUsuario.length === 0) {
                response = '‚ùå Voc√™ n√£o est√° em nenhuma batalha ativa.';
            } else {
                response = '‚öîÔ∏è *SUAS BATALHAS ATIVAS:*\n\n';
                for (let id of batalhasUsuario) {
                    const batalha = batalhasAtivas[id];
                    response += `üî∏ Batalha ativa\n`;
                    response += `  Sua vez: ${batalha.turno === userId ? 'SIM ‚úÖ' : 'N√ÉO ‚è≥'}\n\n`;
                }
            }
        }

        else if (msg === '!apostar') {
            const saldo = torreMoney[userId] || 0;
            if (saldo < 10) {
                response = '‚ùå Voc√™ precisa de pelo menos 10 moedas para apostar.';
            } else {
                const ganhou = Math.random() < 0.5;
                const valor = Math.floor(Math.random() * 30) + 10;
                
                if (ganhou) {
                    torreMoney[userId] += valor;
                    const xpMsg = adicionarXP(userId, 5);
                    response = `üé≤ Voc√™ apostou e *ganhou ${valor} moedas!*${xpMsg} üí∞ Saldo: ${torreMoney[userId]}`;
                } else {
                    torreMoney[userId] = Math.max(0, torreMoney[userId] - valor);
                    response = `üé≤ Voc√™ apostou e *perdeu ${valor} moedas...* üí∞ Saldo: ${torreMoney[userId]}`;
                }
                salvarMoney();
            }
        }

        else if (msg.startsWith('!presentear ')) {
            if (!message.mentionedIds || message.mentionedIds.length === 0) {
                response = '‚ùå Marque algu√©m para enviar moedas. Ex: !presentear @pessoa 50';
            } else {
                const destinatario = message.mentionedIds[0];
                const partes = msg.split(' ').filter(p => p.trim() !== '');
                const valor = parseInt(partes[partes.length - 1]);
                
                if (isNaN(valor) || valor <= 0) {
                    response = '‚ùå Use: !presentear @pessoa valor (ex: !presentear @usuario 50)';
                } else {
                    torreMoney[userId] = torreMoney[userId] || 0;
                    torreMoney[destinatario] = torreMoney[destinatario] || 0;
                    
                    if (torreMoney[userId] < valor) {
                        response = '‚ùå Voc√™ n√£o tem moedas suficientes.';
                    } else {
                        torreMoney[userId] -= valor;
                        torreMoney[destinatario] += valor;
                        salvarMoney();
                        response = `üéÅ Voc√™ enviou ${valor} moedas com sucesso!`;
                    }
                }
            }
        }

        else if (msg.startsWith('!trocar ')) {
            if (!message.mentionedIds || message.mentionedIds.length === 0) {
                response = '‚ùå Use: !trocar @pessoa [seu_item] [item_dele]\nEx: !trocar @pessoa po√ß√£o lanterna';
            } else {
                const partes = msg.split(' ').filter(p => !p.includes('@'));
                partes.shift();
                
                if (partes.length < 2) {
                    response = '‚ùå Especifique os itens da troca!\nEx: !trocar @pessoa po√ß√£o lanterna';
                } else {
                    const destinatario = message.mentionedIds[0];
                    const itemOferecido = partes[0];
                    const itemPedido = partes[1];
                    
                    const invRemetente = torreInventario[userId] || [];
                    
                    if (!invRemetente.includes(itemOferecido)) {
                        response = `‚ùå Voc√™ n√£o possui "${itemOferecido}" no invent√°rio!`;
                    } else {
                        const trocaId = criarProposta(userId, destinatario, itemOferecido, itemPedido);
                        response = `üîÑ Proposta de troca enviada!\n\nüì¶ Voc√™ oferece: ${itemOferecido}\nüì¶ Voc√™ pede: ${itemPedido}\n\nA pessoa deve aceitar com: !aceitartroca ${trocaId}`;
                    }
                }
            }
        }

        else if (msg.startsWith('!aceitartroca ')) {
            const trocaId = msg.replace('!aceitartroca ', '').trim();
            const resultado = aceitarTroca(trocaId);
            
            if (resultado.erro) {
                response = `‚ùå ${resultado.erro}`;
            } else {
                response = `‚úÖ *TROCA REALIZADA COM SUCESSO!*\n\nOs itens foram trocados entre os invent√°rios!`;
            }
        }

        else if (msg === '!minhatrocas' || msg === '!trocas') {
            let trocasPendentes = [];
            
            for (let trocaId in torreTrocas) {
                const troca = torreTrocas[trocaId];
                if (troca.destinatario === userId && troca.status === 'pendente') {
                    trocasPendentes.push({ id: trocaId, ...troca });
                }
            }
            
            if (trocasPendentes.length === 0) {
                response = '‚ùå Voc√™ n√£o tem propostas de troca pendentes!';
            } else {
                let texto = 'üîÑ *PROPOSTAS DE TROCA PENDENTES:*\n\n';
                
                for (let troca of trocasPendentes) {
                    texto += `üì¶ ID: ${troca.id}\n`;
                    texto += `   Oferece: ${troca.itemOferecido}\n`;
                    texto += `   Pede: ${troca.itemPedido}\n\n`;
                }
                
                texto += 'Use: !aceitartroca [ID] para aceitar';
                response = texto;
            }
        }

        // COMANDO !BAN
        else if (msg.startsWith('!ban ') && message.from.includes('@g.us')) {
            if (!(await isAdmin(message))) {
                response = `‚ùå *Acesso Negado*\n\n"Na Torre, apenas os fortes t√™m autoridade. Voc√™ n√£o √© um administrador."`;
            } else {
                const chat = await message.getChat();
                const mention = message.mentionedIds[0];
                
                if (!mention) {
                    response = '‚ùå Marque algu√©m para banir.\n\nüí° Uso: !ban @usuario';
                } else {
                    try {
                        await chat.removeParticipants([mention]);
                        
                        response = `‚ï≠‚ïê‚Ä¢‡≥ã‚úß‡πëü•Ç‡πë‚úß‡≥ã‚Ä¢‚ïê‚ïÆ
     üö´ ùêÅùêÄùêçùêàùêåùêÑùêçùêìùêé üö´
‚ï∞‚ïê‚Ä¢‡≥ã‚úß‡πëü•Ç‡πë‚úß‡≥ã‚Ä¢‚ïê‚ïØ

‚úÖ Usu√°rio removido do grupo!

"Na Torre, os fracos s√£o eliminados. Esta pessoa falhou no teste."

‚öñÔ∏è A√ß√£o executada por um Administrador`;
                        
                        console.log(`üö´ Usu√°rio banido: ${mention}`);
                    } catch (error) {
                        console.error('Erro ao banir:', error);
                        response = '‚ùå N√£o foi poss√≠vel banir este usu√°rio. Verifique se tenho permiss√µes de administrador.';
                    }
                }
            }
        }

        // COMANDO !PROMOVER
        else if (msg.startsWith('!promover ') && message.from.includes('@g.us')) {
            if (!(await isAdmin(message))) {
                response = `‚ùå *Acesso Negado*\n\n"Voc√™ n√£o tem autoridade para promover ningu√©m na Torre."`;
            } else {
                const chat = await message.getChat();
                const mention = message.mentionedIds[0];
                
                if (!mention) {
                    response = '‚ùå Marque algu√©m para promover.\n\nüí° Uso: !promover @usuario';
                } else {
                    try {
                        await chat.promoteParticipants([mention]);
                        
                        response = `‚ï≠‚ïê‚Ä¢‡≥ã‚úß‡πëü•Ç‡πë‚úß‡≥ã‚Ä¢‚ïê‚ïÆ
     üëë ùêèùêëùêéùêåùêéùêÇÃßùêÄÃÉùêé üëë
‚ï∞‚ïê‚Ä¢‡≥ã‚úß‡πëü•Ç‡πë‚úß‡≥ã‚Ä¢‚ïê‚ïØ

‚úÖ Novo administrador promovido!

"Voc√™ subiu um andar na Torre. Use seu poder com sabedoria... ou n√£o."

‚ö° Agora voc√™ faz parte da elite!`;
                        
                        console.log(`üëë Usu√°rio promovido: ${mention}`);
                    } catch (error) {
                        console.error('Erro ao promover:', error);
                        response = '‚ùå N√£o foi poss√≠vel promover este usu√°rio. Verifique se tenho permiss√µes de administrador.';
                    }
                }
            }
        }

        // COMANDO !REBAIXAR
        else if (msg.startsWith('!rebaixar ') && message.from.includes('@g.us')) {
            if (!(await isAdmin(message))) {
                response = `‚ùå *Acesso Negado*\n\n"Apenas administradores podem rebaixar outros."`;
            } else {
                const chat = await message.getChat();
                const mention = message.mentionedIds[0];
                
                if (!mention) {
                    response = '‚ùå Marque algu√©m para rebaixar.\n\nüí° Uso: !rebaixar @usuario';
                } else {
                    try {
                        await chat.demoteParticipants([mention]);
                        
                        response = `‚ï≠‚ïê‚Ä¢‡≥ã‚úß‡πëü•Ç‡πë‚úß‡≥ã‚Ä¢‚ïê‚ïÆ
     ‚¨áÔ∏è ùêëùêÑùêÅùêÄùêàùêóùêÄùêåùêÑùêçùêìùêé ‚¨áÔ∏è
‚ï∞‚ïê‚Ä¢‡≥ã‚úß‡πëü•Ç‡πë‚úß‡≥ã‚Ä¢‚ïê‚ïØ

‚úÖ Administrador rebaixado!

"Voc√™ caiu um andar na Torre. Nem todos merecem estar no topo."

üíî Privil√©gios de admin removidos`;
                        
                        console.log(`‚¨áÔ∏è Usu√°rio rebaixado: ${mention}`);
                    } catch (error) {
                        console.error('Erro ao rebaixar:', error);
                        response = '‚ùå N√£o foi poss√≠vel rebaixar este usu√°rio.';
                    }
                }
            }
        }

        // COMANDO !ADVERTIR
        else if (msg.startsWith('!advertir ') && message.from.includes('@g.us')) {
            if (!(await isAdmin(message))) {
                response = `‚ùå *Acesso Negado*\n\n"Voc√™ n√£o tem autoridade para advertir ningu√©m."`;
            } else {
                const mention = message.mentionedIds[0];
                
                if (!mention) {
                    response = '‚ùå Marque algu√©m para advertir.\n\nüí° Uso: !advertir @usuario [motivo]';
                } else {
                    const motivo = msg.split(' ').slice(2).join(' ') || 'Comportamento inadequado';
                    
                    response = `‚ï≠‚ïê‚Ä¢‡≥ã‚úß‡πëü•Ç‡πë‚úß‡≥ã‚Ä¢‚ïê‚ïÆ
     ‚ö†Ô∏è ùêÄùêÉùêïùêÑùêëùêìùêÑÃÇùêçùêÇùêàùêÄ ‚ö†Ô∏è
‚ï∞‚ïê‚Ä¢‡≥ã‚úß‡πëü•Ç‡πë‚úß‡≥ã‚Ä¢‚ïê‚ïØ

‚ö†Ô∏è *VOC√ä FOI ADVERTIDO!*

üìã Motivo: ${motivo}

"Na Torre, erros t√™m consequ√™ncias. Esta √© sua chance de se redimir. N√£o haver√° outra."

üëÅÔ∏è Administradores est√£o observando`;
                    
                    console.log(`‚ö†Ô∏è Advert√™ncia emitida para: ${mention} - Motivo: ${motivo}`);
                }
            }
        }

        // COMANDO !BANGHOST (MELHORADO COM CONFIRMA√á√ÉO)
        else if (msg === '!banghost' && message.from.includes('@g.us')) {
            if (!(await isAdmin(message))) {
                response = `‚ùå *Acesso Negado*\n\n"Este comando √© poderoso demais para voc√™."`;
            } else {
                response = `‚ï≠‚ïê‚Ä¢‡≥ã‚úß‡πëü•Ç‡πë‚úß‡≥ã‚Ä¢‚ïê‚ïÆ
     ‚ò†Ô∏è ùêÅùêÄùêç ùêÜùêáùêéùêíùêì ‚ò†Ô∏è
‚ï∞‚ïê‚Ä¢‡≥ã‚úß‡πëü•Ç‡πë‚úß‡≥ã‚Ä¢‚ïê‚ïØ

‚ö†Ô∏è *ATEN√á√ÉO!* ‚ö†Ô∏è

Este comando ir√° BANIR TODOS os n√£o-administradores do grupo!

"Quer realmente limpar a Torre de todos os fracos?"

‚úÖ Digite *!confirmarban* para confirmar
‚ùå Digite *!cancelar* para cancelar`;
                
                // Criar um timeout de confirma√ß√£o
                global.banGhostPendente = {
                    userId: userId,
                    groupId: message.from,
                    timestamp: Date.now()
                };
            }
        }

        // COMANDO !CONFIRMARBAN
        else if (msg === '!confirmarban' && message.from.includes('@g.us')) {
            if (!(await isAdmin(message))) {
                response = '‚ùå Apenas administradores podem confirmar.';
            } else if (!global.banGhostPendente || global.banGhostPendente.userId !== userId) {
                response = '‚ùå N√£o h√° opera√ß√£o de ban pendente para voc√™.';
            } else if (Date.now() - global.banGhostPendente.timestamp > 30000) {
                response = '‚è∞ Tempo de confirma√ß√£o expirado (30 segundos). Use !banghost novamente.';
                delete global.banGhostPendente;
            } else {
                try {
                    const chat = await message.getChat();
                    const admins = chat.participants.filter(p => p.isAdmin).map(a => a.id._serialized);
                    
                    let banidos = 0;
                    for (const participant of chat.participants) {
                        if (!admins.includes(participant.id._serialized)) {
                            try {
                                await chat.removeParticipants([participant.id._serialized]);
                                banidos++;
                            } catch (e) {
                                console.error('Erro ao banir participante:', e);
                            }
                        }
                    }
                    
                    response = `‚ï≠‚ïê‚Ä¢‡≥ã‚úß‡πëü•Ç‡πë‚úß‡≥ã‚Ä¢‚ïê‚ïÆ
     üíÄ ùêèùêîùêëùêÜùêÄ ùêÇùêéùêåùêèùêãùêÑùêìùêÄ üíÄ
‚ï∞‚ïê‚Ä¢‡≥ã‚úß‡πëü•Ç‡πë‚úß‡≥ã‚Ä¢‚ïê‚ïØ

‚ò†Ô∏è Ban Ghost executado!

üìä Total de banidos: ${banidos}

"A Torre foi purificada. Apenas os dignos permanecem."

‚öñÔ∏è Que isto sirva de li√ß√£o`;
                    
                    delete global.banGhostPendente;
                    console.log(`üíÄ Ban Ghost executado - ${banidos} usu√°rios removidos`);
                } catch (error) {
                    console.error('Erro no ban ghost:', error);
                    response = '‚ùå Erro ao executar ban ghost.';
                }
            }
        }

        // COMANDO !CANCELAR
        else if (msg === '!cancelar' && message.from.includes('@g.us')) {
            if (global.banGhostPendente && global.banGhostPendente.userId === userId) {
                delete global.banGhostPendente;
                response = '‚úÖ Opera√ß√£o cancelada.\n\n"Decis√£o s√°bia. Nem todo poder precisa ser usado."';
            } else {
                response = '‚ùå N√£o h√° opera√ß√£o pendente para cancelar.';
            }
        }

        // COMANDO !MUTE
        else if (msg === '!mute' && message.from.includes('@g.us')) {
            if (!(await isAdmin(message))) {
                response = `‚ùå *Acesso Negado*\n\n"Silenciar o grupo requer autoridade."`;
            } else {
                try {
                    const chat = await message.getChat();
                    await chat.setMessagesAdminsOnly(true);
                    
                    response = `‚ï≠‚ïê‚Ä¢‡≥ã‚úß‡πëü•Ç‡πë‚úß‡≥ã‚Ä¢‚ïê‚ïÆ
     üîá ùêÜùêëùêîùêèùêé ùêíùêàùêãùêÑùêçùêÇùêàùêÄùêÉùêé üîá
‚ï∞‚ïê‚Ä¢‡≥ã‚úß‡πëü•Ç‡πë‚úß‡≥ã‚Ä¢‚ïê‚ïØ

üîá Grupo mutado!

"Sil√™ncio. Apenas os administradores podem falar agora."

üí° Use *!desmute* para liberar`;
                    
                    console.log('üîá Grupo mutado');
                } catch (error) {
                    console.error('Erro ao mutar:', error);
                    response = '‚ùå N√£o foi poss√≠vel mutar o grupo.';
                }
            }
        }

        // COMANDO !DESMUTE
        else if (msg === '!desmute' && message.from.includes('@g.us')) {
            if (!(await isAdmin(message))) {
                response = `‚ùå *Acesso Negado*\n\n"Liberar o grupo requer autoridade."`;
            } else {
                try {
                    const chat = await message.getChat();
                    await chat.setMessagesAdminsOnly(false);
                    
                    response = `‚ï≠‚ïê‚Ä¢‡≥ã‚úß‡πëü•Ç‡πë‚úß‡≥ã‚Ä¢‚ïê‚ïÆ
     üîä ùêÜùêëùêîùêèùêé ùêãùêàùêÅùêÑùêëùêÄùêÉùêé üîä
‚ï∞‚ïê‚Ä¢‡≥ã‚úß‡πëü•Ç‡πë‚úß‡≥ã‚Ä¢‚ïê‚ïØ

üîä Grupo desmutado!

"Podem falar novamente. Usem bem essa liberdade."

üí¨ Todos podem enviar mensagens`;
                    
                    console.log('üîä Grupo desmutado');
                } catch (error) {
                    console.error('Erro ao desmutar:', error);
                    response = '‚ùå N√£o foi poss√≠vel desmutar o grupo.';
                }
            }
        }

        // COMANDO !MARCAR (MELHORADO)
        else if (msg === '!marcar' && message.from.includes('@g.us')) {
            if (!(await isAdmin(message))) {
                response = `‚ùå *Acesso Negado*\n\n"Apenas administradores podem marcar todos."`;
            } else {
                try {
                    const chat = await message.getChat();
                    let text = `‚ï≠‚ïê‚Ä¢‡≥ã‚úß‡πëü•Ç‡πë‚úß‡≥ã‚Ä¢‚ïê‚ïÆ
     üì¢ ùêÇùêáùêÄùêåùêÄùêÉùêÄ ùêÜùêÑùêëùêÄùêã üì¢
‚ï∞‚ïê‚Ä¢‡≥ã‚úß‡πëü•Ç‡πë‚úß‡≥ã‚Ä¢‚ïê‚ïØ

"A Torre convoca todos os presentes!"\n\n`;
                    
                    let mentions = [];

                    for (let participant of chat.participants) {
                        const contact = await client.getContactById(participant.id._serialized);
                        mentions.push(contact);
                        text += `@${contact.number} `;
                    }

                    await chat.sendMessage(text, { mentions });
                    console.log(`üì¢ Marca√ß√£o em massa - ${mentions.length} usu√°rios`);
                    return;
                } catch (error) {
                    console.error('Erro ao marcar todos:', error);
                    response = '‚ùå N√£o foi poss√≠vel marcar todos os membros.';
                }
            }
        }

        // COMANDO !ADMINS - VER LISTA DE ADMINS
        else if (msg === '!admins' && message.from.includes('@g.us')) {
            try {
                const chat = await message.getChat();
                const admins = chat.participants.filter(p => p.isAdmin);
                
                let texto = `‚ï≠‚ïê‚Ä¢‡≥ã‚úß‡πëü•Ç‡πë‚úß‡≥ã‚Ä¢‚ïê‚ïÆ
     üëë ùêÄùêÉùêåùêàùêçùêàùêíùêìùêëùêÄùêÉùêéùêëùêÑùêí üëë
‚ï∞‚ïê‚Ä¢‡≥ã‚úß‡πëü•Ç‡πë‚úß‡≥ã‚Ä¢‚ïê‚ïØ

"Os que governam este andar da Torre:"\n\n`;
                
                for (let i = 0; i < admins.length; i++) {
                    const numero = admins[i].id.user;
                    texto += `${i + 1}. +${numero}\n`;
                }
                
                texto += `\nüë• Total: ${admins.length} administradores`;
                response = texto;
            } catch (error) {
                console.error('Erro ao listar admins:', error);
                response = '‚ùå N√£o foi poss√≠vel listar os administradores.';
            }
        }

        // COMANDO !INFOGRUPO - INFO DO GRUPO
        else if (msg === '!infogrupo' && message.from.includes('@g.us')) {
            try {
                const chat = await message.getChat();
                const criacao = new Date(chat.createdAt * 1000).toLocaleDateString('pt-BR');
                const admins = chat.participants.filter(p => p.isAdmin).length;
                
                response = `‚ï≠‚ïê‚Ä¢‡≥ã‚úß‡πëü•Ç‡πë‚úß‡≥ã‚Ä¢‚ïê‚ïÆ
     üìä ùêàùêçùêÖùêé ùêÉùêé ùêÜùêëùêîùêèùêé üìä
‚ï∞‚ïê‚Ä¢‡≥ã‚úß‡πëü•Ç‡πë‚úß‡≥ã‚Ä¢‚ïê‚ïØ

üìå *Nome:* ${chat.name}
üìÖ *Criado em:* ${criacao}
üë• *Membros:* ${chat.participants.length}
üëë *Admins:* ${admins}
üîí *Apenas admins:* ${chat.groupMetadata.announce ? 'Sim' : 'N√£o'}

"Este √© o andar ${chat.participants.length} da Torre"`;
            } catch (error) {
                console.error('Erro ao buscar info do grupo:', error);
                response = '‚ùå N√£o foi poss√≠vel obter informa√ß√µes do grupo.';
            }
        }

        // COMANDO !STICKER - CRIAR FIGURINHA
        else if (msg === '!sticker' || msg === '!s' || msg === '!fig') {
            try {
                let mediaMessage;

                // Verifica se respondeu uma mensagem com m√≠dia
                if (message.hasQuotedMsg) {
                    const quotedMsg = await message.getQuotedMessage();
                    if (!quotedMsg.hasMedia) {
                        response = `‚ï≠‚ïê‚Ä¢‡≥ã‚úß‡πëü•Ç‡πë‚úß‡≥ã‚Ä¢‚ïê‚ïÆ
     ‚ùå ùêÑùêëùêëùêé ‚ùå
‚ï∞‚ïê‚Ä¢‡≥ã‚úß‡πëü•Ç‡πë‚úß‡≥ã‚Ä¢‚ïê‚ïØ

"Voc√™ precisa responder uma imagem ou v√≠deo."

üí° Como usar:
‚Ä¢ Responda uma foto/v√≠deo com !sticker
‚Ä¢ Ou envie uma foto com a legenda !sticker`;
                    } else {
                        mediaMessage = quotedMsg;
                    }
                } 
                // Verifica se enviou m√≠dia junto com o comando
                else if (message.hasMedia) {
                    mediaMessage = message;
                } 
                // Nenhuma m√≠dia encontrada
                else {
                    response = `‚ï≠‚ïê‚Ä¢‡≥ã‚úß‡πëü•Ç‡πë‚úß‡≥ã‚Ä¢‚ïê‚ïÆ
     üì∏ ùêÇùêéùêåùêé ùêîùêíùêÄùêë üì∏
‚ï∞‚ïê‚Ä¢‡≥ã‚úß‡πëü•Ç‡πë‚úß‡≥ã‚Ä¢‚ïê‚ïØ

"Para criar uma figurinha, voc√™ precisa enviar uma imagem."

üí° Op√ß√µes:
‚ïé‚Åë€£€ú€úÕúÕ°‚≠ê !sticker - Responda uma imagem
‚ïé‚Åë€£€ú€úÕúÕ°‚≠ê !s - Atalho para sticker
‚ïé‚Åë€£€ú€úÕúÕ°‚≠ê !stickernome [nome] - Com nome customizado
‚ïé‚Åë€£€ú€úÕúÕ°‚≠ê !stickersem - Sem marca d'√°gua

üé® Formatos aceitos: JPG, PNG, GIF, MP4`;
                }

                if (mediaMessage) {
                    // Envia mensagem de processamento
                    await message.reply('‚è≥ Criando figurinha... Aguarde!\n\n"At√© eu preciso de tempo para criar arte."');
                    
                    console.log('üì• Baixando m√≠dia...');
                    const media = await mediaMessage.downloadMedia();
                    
                    if (!media) {
                        response = '‚ùå N√£o consegui baixar a m√≠dia. Tente novamente.';
                        return;
                    }

                    const inputBuffer = Buffer.from(media.data, 'base64');
                    
                    // Verifica o tipo de m√≠dia
                    const isVideo = media.mimetype.includes('video');
                    
                    console.log(`üé® Processando ${isVideo ? 'v√≠deo' : 'imagem'}...`);

                    // SVG com marca d'√°gua da Rachel
                    const svg = `<svg width="512" height="512">
                        <defs>
                            <filter id="shadow">
                                <feDropShadow dx="0" dy="0" stdDeviation="3" flood-color="black"/>
                            </filter>
                        </defs>
                        <text x="50%" y="96%" 
                              font-size="32" 
                              fill="white" 
                              stroke="black" 
                              stroke-width="2.5" 
                              text-anchor="middle" 
                              font-family="Arial, sans-serif"
                              font-weight="bold"
                              filter="url(#shadow)">
                            Rachel Bot ‚≠ê
                        </text>
                    </svg>`;

                    let stickerBuffer;

                    if (isVideo) {
                        // Para v√≠deos, pega apenas o primeiro frame
                        stickerBuffer = await sharp(inputBuffer, { animated: false })
                            .resize(512, 512, { 
                                fit: 'contain',
                                background: { r: 0, g: 0, b: 0, alpha: 0 }
                            })
                            .composite([{ 
                                input: Buffer.from(svg), 
                                gravity: 'south'
                            }])
                            .webp({ quality: 100 })
                            .toBuffer();
                    } else {
                        // Para imagens
                        stickerBuffer = await sharp(inputBuffer)
                            .resize(512, 512, { 
                                fit: 'contain',
                                background: { r: 0, g: 0, b: 0, alpha: 0 }
                            })
                            .composite([{ 
                                input: Buffer.from(svg), 
                                gravity: 'south'
                            }])
                            .webp({ quality: 100 })
                            .toBuffer();
                    }

                    const stickerMedia = new MessageMedia(
                        'image/webp', 
                        stickerBuffer.toString('base64'), 
                        'sticker.webp'
                    );

                    console.log('üì§ Enviando figurinha...');
                    await client.sendMessage(message.from, stickerMedia, { 
                        sendMediaAsSticker: true,
                        stickerName: 'Rachel Bot',
                        stickerAuthor: 'Torre de Deus'
                    });

                    console.log('‚úÖ Figurinha criada e enviada com sucesso!');
                    
                    // Adiciona XP como recompensa por usar o bot
                    const xpMsg = adicionarXP(userId, 5);
                    
                    return;
                }
            } catch (err) {
                console.error('‚ùå Erro ao criar sticker:', err);
                console.error('Stack:', err.stack);
                
                response = `‚ï≠‚ïê‚Ä¢‡≥ã‚úß‡πëü•Ç‡πë‚úß‡≥ã‚Ä¢‚ïê‚ïÆ
     ‚ùå ùêÑùêëùêëùêé ‚ùå
‚ï∞‚ïê‚Ä¢‡≥ã‚úß‡πëü•Ç‡πë‚úß‡≥ã‚Ä¢‚ïê‚ïØ

"Algo deu errado ao criar a figurinha..."

üîç Poss√≠veis causas:
‚Ä¢ Arquivo muito grande (m√°x 5MB)
‚Ä¢ Formato n√£o suportado
‚Ä¢ Erro tempor√°rio do servidor

üí° Tente:
‚Ä¢ Usar uma imagem menor
‚Ä¢ Enviar em formato JPG ou PNG
‚Ä¢ Tentar novamente em alguns segundos`;
            }
        }

        // COMANDO !STICKERNOME - COM NOME CUSTOMIZADO
        else if (msg.startsWith('!stickernome ') || msg.startsWith('!sn ')) {
            try {
                const nomeCustom = msg.replace('!stickernome ', '').replace('!sn ', '').trim();
                
                if (!nomeCustom) {
                    response = '‚ùå Use: !stickernome [seu texto]\n\nResponda uma imagem com este comando!';
                    return;
                }

                let mediaMessage;

                if (message.hasQuotedMsg) {
                    const quotedMsg = await message.getQuotedMessage();
                    if (quotedMsg.hasMedia) {
                        mediaMessage = quotedMsg;
                    }
                } else if (message.hasMedia) {
                    mediaMessage = message;
                }

                if (!mediaMessage) {
                    response = '‚ùå Responda uma imagem com o comando!\n\nEx: Responda uma foto com:\n!stickernome Seu Texto Aqui';
                    return;
                }

                await message.reply('‚è≥ Criando figurinha personalizada...');
                
                const media = await mediaMessage.downloadMedia();
                const inputBuffer = Buffer.from(media.data, 'base64');

                // SVG com texto customizado
                const svg = `<svg width="512" height="512">
                    <defs>
                        <filter id="shadow">
                            <feDropShadow dx="0" dy="0" stdDeviation="3" flood-color="black"/>
                        </filter>
                    </defs>
                    <text x="50%" y="96%" 
                          font-size="28" 
                          fill="white" 
                          stroke="black" 
                          stroke-width="2.5" 
                          text-anchor="middle" 
                          font-family="Arial, sans-serif"
                          font-weight="bold"
                          filter="url(#shadow)">
                        ${nomeCustom.substring(0, 30)}
                    </text>
                </svg>`;

                const stickerBuffer = await sharp(inputBuffer)
                    .resize(512, 512, { 
                        fit: 'contain',
                        background: { r: 0, g: 0, b: 0, alpha: 0 }
                    })
                    .composite([{ input: Buffer.from(svg), gravity: 'south' }])
                    .webp({ quality: 100 })
                    .toBuffer();

                const stickerMedia = new MessageMedia(
                    'image/webp', 
                    stickerBuffer.toString('base64'), 
                    'sticker.webp'
                );

                await client.sendMessage(message.from, stickerMedia, { 
                    sendMediaAsSticker: true,
                    stickerName: nomeCustom,
                    stickerAuthor: 'Rachel Bot'
                });

                console.log(`‚úÖ Figurinha customizada criada: "${nomeCustom}"`);
                adicionarXP(userId, 8);
                return;

            } catch (err) {
                console.error('Erro ao criar sticker customizado:', err);
                response = '‚ùå Erro ao criar figurinha personalizada.';
            }
        }

        // COMANDO !STICKERSEM - SEM MARCA D'√ÅGUA
        else if (msg === '!stickersem' || msg === '!ss') {
            try {
                let mediaMessage;

                if (message.hasQuotedMsg) {
                    const quotedMsg = await message.getQuotedMessage();
                    if (quotedMsg.hasMedia) {
                        mediaMessage = quotedMsg;
                    }
                } else if (message.hasMedia) {
                    mediaMessage = message;
                }

                if (!mediaMessage) {
                    response = '‚ùå Responda uma imagem com !stickersem\n\n"Sem marca d\'√°gua, sem cr√©ditos..."';
                    return;
                }

                await message.reply('‚è≥ Criando figurinha limpa...');
                
                const media = await mediaMessage.downloadMedia();
                const inputBuffer = Buffer.from(media.data, 'base64');

                // Sem SVG, sem marca d'√°gua
                const stickerBuffer = await sharp(inputBuffer)
                    .resize(512, 512, { 
                        fit: 'contain',
                        background: { r: 0, g: 0, b: 0, alpha: 0 }
                    })
                    .webp({ quality: 100 })
                    .toBuffer();

                const stickerMedia = new MessageMedia(
                    'image/webp', 
                    stickerBuffer.toString('base64'), 
                    'sticker.webp'
                );

                await client.sendMessage(message.from, stickerMedia, { 
                    sendMediaAsSticker: true,
                    stickerName: 'Sticker',
                    stickerAuthor: ''
                });

                console.log('‚úÖ Figurinha sem marca criada');
                adicionarXP(userId, 3);
                return;

            } catch (err) {
                console.error('Erro ao criar sticker sem marca:', err);
                response = '‚ùå Erro ao criar figurinha.';
            }
        }

        // COMANDO !STICKERINFO - INFO SOBRE STICKERS
        else if (msg === '!stickerinfo' || msg === '!infofi') {
            response = `‚ï≠‚ïê‚Ä¢‡≥ã‚úß‡πëü•Ç‡πë‚úß‡≥ã‚Ä¢‚ïê‚ïÆ
     üé® ùêíùêìùêàùêÇùêäùêÑùêëùêí üé®
‚ï∞‚ïê‚Ä¢‡≥ã‚úß‡πëü•Ç‡πë‚úß‡≥ã‚Ä¢‚ïê‚ïØ

"Criar figurinhas √© uma arte na Torre."

üìã *COMANDOS DISPON√çVEIS:*

‚ïé‚Åë€£€ú€úÕúÕ°‚≠ê !sticker ou !s
   ‚Üí Cria figurinha com marca Rachel Bot

‚ïé‚Åë€£€ú€úÕúÕ°‚≠ê !stickernome [texto]
   ‚Üí Cria figurinha com seu texto
   ‚Üí Ex: !stickernome Meu Nome

‚ïé‚Åë€£€ú€úÕúÕ°‚≠ê !stickersem ou !ss
   ‚Üí Cria figurinha sem marca d'√°gua

üì∏ *FORMATOS ACEITOS:*
‚Ä¢ Imagens: JPG, PNG, GIF
‚Ä¢ V√≠deos: MP4 (pega primeiro frame)
‚Ä¢ Tamanho m√°ximo: 5MB

üí° *COMO USAR:*
1. Envie uma imagem com a legenda !sticker
2. Ou responda uma imagem com !sticker

‚ú® Ganhe +5 XP a cada figurinha criada!`;
        }

        else {
            // Comando desconhecido - resposta com personalidade da Rachel
            const respostasDesconhecido = [
                `‚ùå *Comando desconhecido*\n\n"Voc√™ nem sabe usar comandos direito..."\n\nüí° Digite *!menu* para ver o que eu posso fazer.`,
                `‚ùå *Isso n√£o existe*\n\n"Perder tempo com comandos errados n√£o vai te levar ao topo da Torre."\n\nüí° Use *!menu* para ver os comandos.`,
                `‚ùå *Comando inv√°lido*\n\n"Na Torre, um erro pode custar caro. Aprenda os comandos corretos."\n\nüí° Digite *!ajuda* para o menu completo.`,
                `‚ùå *N√£o reconhe√ßo isso*\n\n"Se voc√™ n√£o sabe nem digitar um comando, como pretende subir a Torre?"\n\nüí° Veja *!menu* para ajuda.`
            ];
            
            response = respostasDesconhecido[Math.floor(Math.random() * respostasDesconhecido.length)];
            
            // Log do comando desconhecido para voc√™ melhorar o bot
            console.log(`‚ö†Ô∏è Comando desconhecido tentado: "${message.body}"`);
        }

        if (response) {
            console.log(`üí¨ Enviando resposta...`);
            await message.reply(response);
            console.log('‚úÖ Resposta enviada!\n');
        }

    } catch (error) {
        console.error('‚ùå Erro ao processar mensagem:', error);
        console.error('üìç Stack trace:', error.stack);
        console.error('üìù Mensagem que causou erro:', message.body);
        console.error('üë§ Usu√°rio:', userId);
        
        // Respostas de erro com personalidade da Rachel
        const respostasErro = [
            `‚ùå *Algo deu errado...*\n\n"At√© eu, que quero ver as estrelas, tenho limites. Tente novamente."\n\nüí° Se persistir, contate o criador: *!criador*`,
            `‚ùå *Erro na Torre*\n\n"Parece que encontramos um obst√°culo inesperado. A Torre √© imprevis√≠vel..."\n\nüîÑ Tente usar o comando novamente.`,
            `‚ùå *Falha no sistema*\n\n"Nem tudo funciona perfeitamente na Torre. Tente de novo em alguns segundos."\n\nüí° Comando: *!criador* para suporte.`,
            `‚ùå *Houston, temos um problema*\n\n"Algo n√£o saiu como planejado... Mas n√£o vou desistir. Voc√™ tamb√©m n√£o deveria."\n\nüîÑ Tente novamente!`
        ];
        
        try {
            const respostaErro = respostasErro[Math.floor(Math.random() * respostasErro.length)];
            await message.reply(respostaErro);
            console.log('‚úÖ Mensagem de erro enviada ao usu√°rio');
        } catch (e) {
            console.error('‚ùå‚ùå ERRO CR√çTICO - N√£o foi poss√≠vel enviar mensagem de erro:', e);
            // Tenta uma √∫ltima vez com mensagem simples
            try {
                await message.reply('‚ùå Erro cr√≠tico. Use !criador para reportar.');
            } catch (finalError) {
                console.error('‚ùå‚ùå‚ùå FALHA TOTAL NA COMUNICA√á√ÉO:', finalError);
            }
        }
    }
});

client.on('auth_failure', (msg) => {
    console.error('‚ùå FALHA NA AUTENTICA√á√ÉO:', msg);
    console.log('üí° Tente deletar a pasta .wwebjs_auth e escanear o QR novamente');
});

client.on('disconnected', (reason) => {
    console.log('‚ö†Ô∏è  Bot desconectado. Motivo:', reason);
    console.log('üîÑ Reiniciando...');
    client.initialize();
});

client.on('error', (error) => {
    console.error('‚ùå ERRO NO BOT:', error);
});

console.log('üîÑ Inicializando conex√£o com WhatsApp...\n');
client.initialize().catch(err => {
    console.error('‚ùå Erro ao inicializar:', err);
});